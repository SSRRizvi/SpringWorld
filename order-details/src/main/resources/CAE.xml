<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="CAE_" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" id="e893dc1d-8ba5-4483-aef3-f4a8eab2c7a6" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="WsdlSettings@cache-wsdls">true</con:setting><con:setting id="ProjectSettings@hermesConfig">${#System#user.home}\.hermes</con:setting></con:settings><con:testSuite name="Comparative Analysis Engine" id="dab89661-27ea-4228-a153-8c4f0ab8d6c8"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCaseStep" searchProperties="true" id="7141653e-a7b0-4ad3-a33c-baad962c9e6f"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="d89ade35-2c1d-4d2b-9e3f-2b0fe9db40b5"><con:settings/><con:config><script><![CDATA[import jxl.*
import java.util.*;
import jxl.write.*;
import jxl.write.Boolean;
import jxl.write.Number;
import jxl.write.biff.RowsExceededException;
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.impl.wsdl.WsdlProject
import com.eviware.soapui.impl.wsdl.WsdlInterface
import com.eviware.soapui.impl.WsdlInterfaceFactory
import com.eviware.soapui.impl.wsdl.WsdlOperation
import com.eviware.soapui.impl.wsdl.WsdlRequest
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.impl.wsdl.WsdlSubmitContext;
import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.model.iface.Response;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlOptions;
import com.eviware.soapui.impl.wsdl.actions.iface.RemoveInterfaceAction;



def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def projectDir = groovyUtils.projectPath
//log.info(projectDir);
String endPointCAP="";
String endPointWM="";

def project = testRunner.getTestCase().getTestSuite().getProject();
def utils = project.runAfterLoadScript();
def testCase = testRunner.testCase;
WsdlProject wsdlproject = new WsdlProject() 
WsdlInterface iface 
WsdlOperation operation
XmlObject resultWM
XmlObject resultCAP
int startingRow=0;
int endOfRow =1;
int comResult=2; 
int startAtRow  = 0
String testCaseNo
String FileName=""
String sheetName=""
int rowCounter=0;
String operationName=""
String readWSDL="false";
String soapUIResponse="";
try {
def testSuite = testRunner.getTestCase().getTestSuite()
//def wsdlName = context.expand( '${#Project#wsdlName}');
def wsdlName = project.getPropertyValue("wsdlName");
//def dataSheetName = context.expand( '${#Project#dataSheetName}');
def dataSheetName = project.getPropertyValue("dataSheetName");
def opName=  project.getPropertyValue("operationName");
testSuite.setPropertyValue("operationName",opName); 
def outputFilePath=project.getPropertyValue("outputFilePath");
//log.info(wsdlName);
//log.info(dataSheetName)
//File fp = new File(projectDir+"/"+dataSheetName) 	
File fp = new File(outputFilePath+dataSheetName) 	
	//log.info(fp)	
	wb = Workbook.getWorkbook(fp)
	Endpoint = wb.getSheet("Endpoint")
	countRows = Endpoint.getRows()
	countColumns=Endpoint.getColumns()
	def  readEndpoints = new String[countRows];
	
	int r=0;
			for (int readRow=1 ;readRow < countRows;readRow++){
			//log.info(Endpoint.getCell(0, readRow).getContents().trim())
			
			if(Endpoint.getCell(0, readRow).getContents().trim()=='run'){
				
			for (int j=0 ;j < countColumns;j++){
				
				readEndpoints[readRow]=Endpoint.getCell(0, readRow).getContents().trim()	
				
				if(readEndpoints[readRow]=='run'){
					j++;
					//log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					if(readWSDL == "false"){
						//log.info(project)
						//log.info(projectDir)
						//log.info(Endpoint.getCell(j, readRow).getContents().trim())
						//log.info(projectDir+"/"+wsdlName)
						
					//iface= WsdlInterfaceFactory.importWsdl(project, projectDir+"/"+wsdlName, true )[0]
					iface= WsdlInterfaceFactory.importWsdl(project, outputFilePath+"/"+wsdlName, true )[0]
					
					 //log.info(2)
					 readWSDL="true";
					}
					//log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					testSuite.setPropertyValue("OutputFileName",Endpoint.getCell(j, readRow).getContents().trim().substring(0,Endpoint.getCell(j, readRow).getContents().trim().indexOf(".")));
				
					j++;
					operationName=Endpoint.getCell(j, readRow).getContents().trim();
					//log.info(operationName)
					soapUIResponse=soapUIResponse+operationName;
					testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse+",0,0,0");
					operation = (WsdlOperation) iface.getOperationByName(operationName) 
					//log.info(" operation -  "+operationName)
					j++;
					testCase.setPropertyValue("inputColumnSheet", Endpoint.getCell(j,readRow).getContents().trim());
					testSuite.setPropertyValue("outputFileName"+readRow, Endpoint.getCell(j,readRow).getContents().trim());
					FileName=FileName.concat("outputFileName"+readRow+",");
					testSuite.setPropertyValue("FileName",FileName);
					
					j++;
					testCase.setPropertyValue("outputColumnSheet", Endpoint.getCell(j, readRow).getContents().trim());
					j++;
					endPointWM=Endpoint.getCell(j, readRow).getContents().trim()
					j++;
					endPointCAP=Endpoint.getCell(j,readRow).getContents().trim()	
				
					if((project.getPropertyValue("endpoint1") != null)){
						endPointCAP=project.getPropertyValue("endpoint1");
					}

						if(project.getPropertyValue("endpoint2") != null){
						endPointWM=project.getPropertyValue("endpoint2");
					}
						log.info("endPointCAP--"+endPointCAP)
						log.info("endPointWM--"+endPointWM)
					
						}
				
				}
		
			
			


	int row= 0;
	
	sheet = wb.getSheet(testCase.getPropertyValue("inputColumnSheet"))
	columns = sheet.getColumns()
	rows = sheet.getRows()
	columns=sheet.getColumns()
	int startAtColumn = 0
	int totalTestCases=rows - 1;
	int success=0;
	int failure=0;	
	int soapfault=0;
	String soapfaultflagCAP="false"
	String soapfaultflagWM="false"
	startAtRow  = 0
	testCaseNo=0
	String contentCAP
	String contentWM
	String unretrybleError="false"
	String filterList="";
	
	def  valCAP	= new String[columns];

	
for (int j=0 ;j < columns;j++)
	{
		valCAP[j]=sheet.getCell(j, 0).getContents().trim()
		testSuite.setPropertyValue("valCAP"+j, sheet.getCell(j, startAtRow).getContents().trim());
		//log.info(sheet.getCell(j, startAtRow).getContents().trim())
         if(sheet.getCell(j, startAtRow).getContents().trim().indexOf("SK_") != -1){
                                                filterList=filterList + ","+j;
                                }

	}
	int countRow=1;	

for (int i =1; i<rows; i++)
	{
			if(i==1){
			success=0;
			failure=0;
			soapfault=0;
			startingRow=1;
			endOfRow =2;
			comResult=3; 
			}else{
			startingRow=startingRow+3;
			endOfRow=endOfRow+3;
			comResult=comResult+3;	
			}
			log.info("Excecuting Test case# "+i);
			//log.info("----------------------------"+startingRow);
			WsdlRequest requestCAP = operation.addNewRequest("requestCAP") 
			def capRequest = operation.createRequest(true) 
			requestCAP.setRequestContent(capRequest) ;
			requestCAP.setEndpoint(endPointCAP);
			//requestCAP.submit(new WsdlSubmitContext(requestCAP),false)
			def holderCAP = new XmlHolder(capRequest)

			
			WsdlRequest requestWM = operation.addNewRequest("requestWM") 
			def wmRequest = operation.createRequest(true) 
			requestWM.setRequestContent(wmRequest) ;
			requestWM.setEndpoint(endPointWM);
			def holderWM = new XmlHolder(wmRequest)
		
		
		for (int j=0 ;j < columns;j++)
		 	{
                             if( filterList.indexOf(j+"") != -1){
                                                   continue;
                                                            }

		 		//log.info(testSuite.getPropertyValue("valCAP"+j))
		 		
		 		if ( testSuite.getPropertyValue("valCAP"+j).indexOf("OP_").equals(-1)){
		 		//log.info(testSuite.getPropertyValue("valCAP"+j).indexOf("OP_"))
				holderCAP.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
				holderWM.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
			
			}else{
				
				
				String removeVal=testSuite.getPropertyValue("valCAP"+j).substring(3);
				//log.info("removing optional node ---"+removeVal)
				//log.info(holderCAP.containsKey(removeVal))
				
				holderCAP.removeDomNodes("//"+removeVal) 
				holderWM.removeDomNodes("//"+removeVal) 
			
			}
		 	}

			requestCAP.setRequestContent(holderCAP.getXml())
			String responseCAPContent
			String responseWMContent
			String content
			 XmlObject xmlWMResponse
			 XmlObject xmlCAPResponse


				try{
			WsdlSubmit submitCAP = (WsdlSubmit) requestCAP.submit( new WsdlSubmitContext(requestCAP), false );
			Response responseCAP = submitCAP.getResponse();
			responseCAPContent= responseCAP.getContentAsString();
			 xmlCAPResponse = XmlUtils.createXmlObject( responseCAPContent );
			 contentCAP=responseCAPContent;
			}catch(Exception e){
			contentCAP="CAP Socket Time Out Endpoint -" +endPointCAP ;
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			//log.error(contentCAP);
			break;
			}
			if(responseCAPContent.indexOf("No service was found")!= -1){
				contentCAP="No service was found at CAP endpoint -" +endPointCAP ;
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
				//log.error(contentCAP);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
			//log.error("responseCAPContent"+responseCAPContent)
			if(responseCAPContent.indexOf("errorCode")== -1 && responseCAPContent.indexOf(":Fault")!= -1){
				
			if(responseCAPContent.indexOf("<soap:Text")!= -1 || responseCAPContent.indexOf("faultcode")!= -1){
				
				if(responseCAPContent.indexOf("<soap:Text")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("<soap:Text"),responseCAPContent.indexOf("</soap:Text>")) ;
				}else if(responseCAPContent.indexOf("<soap:Fault")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soap:Fault"),responseCAPContent.indexOf("</soap:Fault>")) ;	
				}else if(responseCAPContent.indexOf("<soapenv:Fault")!= -1 ){

				contentCAP="SOAP ENV FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soapenv:Fault"),responseCAPContent.indexOf("</soapenv:Fault>")) ;	
				}
				soapfaultflagCAP="true"
			}else{
				
				contentCAP="SOAP FAULT:"+responseCAPContent ;
				soapfaultflagCAP="false"
			}
				
				//log.error("soapfaultflagCAP"+soapfaultflagCAP);
				//log.error(contentCAP);
				
				
			}
			 requestWM.setRequestContent(holderWM.getXml())

			 try{
			WsdlSubmit submitWM = (WsdlSubmit) requestWM.submit( new WsdlSubmitContext(requestWM), false );
			Response responseWM = submitWM.getResponse();
			responseWMContent = responseWM.getContentAsString();
			xmlWMResponse = XmlUtils.createXmlObject( responseWMContent );	
			contentWM=responseWMContent;
			}catch(Exception e){
			contentWM="WM Socket Time Out Endpoint -" +endPointWM ;
			//log.error(contentWM);
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			break;
			}
			if(responseWMContent.indexOf("No service was found")!= -1){
				contentWM="No service was found at WM endpoint-" +endPointWM ;
				//log.error(contentWM);
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
		//	log.error("responseWMContent"+responseWMContent)
			if(responseWMContent.indexOf("errorCode")== -1 && responseWMContent.indexOf(":Fault")!= -1){
				if(responseWMContent.indexOf("<webM:message")!= -1){
				contentWM="SOAP FAULT:"+responseWMContent.substring(responseWMContent.indexOf("<webM:message"),responseWMContent.indexOf("</webM:message>")) ;
				soapfaultflagWM="true"
				}else{
					contentWM=responseWMContent;
					soapfaultflagWM="false"
				}
				//log.error("soapfaultflagWM"+soapfaultflagWM);
				//log.error(contentWM);
				
			}
			
			
		
			sheetOutput = wb.getSheet(testCase.getPropertyValue("outputColumnSheet"))	
			columnsOutput = sheetOutput.getColumns()
			rowsOutput = sheetOutput.getRows()
			testCaseNo= i;
		
			String result="PAAS"
			String ignoreComparision="false"

			for (int i1 =0; i1<rowsOutput; i1++) {	
					

	for (int j1=0 ;j1 < columnsOutput;j1++){
		
		 sheetName=testSuite.getPropertyValue("outputFileName"+readRow);
		valHeader =sheetOutput.getCell(j1, startAtRow).getContents().trim();
		//log.error("valHeader"+valHeader);
		
		if(valHeader.indexOf("IG_") != -1){
			try{
			resultWM=xmlWMResponse.selectPath("//" +valHeader.substring(3))[0];	
		valWM=resultWM.getStringValue();
		resultCAP=xmlCAPResponse.selectPath("//" +valHeader.substring(3))[0];	
		valCAP=resultCAP.getStringValue();
		ignoreComparision="true"
		utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}catch(Exception e){
			//log.error("Exception occured "+e.toString())
			valCAP=""
			valWM=""
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
			
	
		}
		
				
		}else{
try{	
//	log.error("*************"+valHeader);
valWM="";
//log.info("resultWM"+valWM);
 XmlCursor cursor = xmlWMResponse.newCursor();	
   cursor.selectPath("//" +valHeader);
//log.error("*****cursor********"+cursor.getSelectionCount());
//log.error("*****cursor value********"+cursor.getTextValue());

if(cursor.getSelectionCount()==1){
resultWM=xmlWMResponse.selectPath("//" +valHeader)[0];	
valWM=resultWM.getStringValue();
//valWM=valWM.replaceAll("\\s","");
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}else{
for(int j=0 ; j<cursor.getSelectionCount();j++){ 
resultWM=xmlWMResponse.selectPath("//" +valHeader)[j];	
valWM=valWM+"#"+resultWM.getStringValue();	
//valWM=cursor.getTextValue();o
//log.info("&&&&&&&&&&&&&&&&&valWM"+valWM)
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
//log.info("****VAL2*********"+xmlWMResponse.selectPath("//" +valHeader)[1]);
//	log.error("@@@@@@@@@@@@@@@@@@"+xmlWMResponse.selectPath("//" +valHeader)[0]);   //OfferNameList/OfferName')
/*
for(int countWM=0 ; countWM <= cursor.getSelectionCount() ; countWM++){
utils.setOutputData(sheetName,cursor.selectPath("//" +valHeader)[countWM],startAtRow,j1+2);
}
*/
}
}
}catch(Exception e){
	//log.error("Exception occured ****"+e.toString())
	valWM=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}

try{
valCAP="";
XmlCursor cursor = xmlCAPResponse.newCursor();	
   cursor.selectPath("//" +valHeader);
//log.error("*****cursor********"+cursor.getSelectionCount());
//log.error("*****cursor value********"+cursor.getTextValue());

if(cursor.getSelectionCount()==1){
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[0];	
valCAP=resultCAP.getStringValue();
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}else{
	
for(int j=0 ; j<cursor.getSelectionCount();j++){ 
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[j];	
valCAP=valCAP+"#"+resultCAP.getStringValue();
//log.info("&&&&&&&&&&&&&&&&&valCAP"+valCAP)
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
//log.info("****VAL2*********"+xmlWMResponse.selectPath("//" +valHeader)[1]);
//	log.error("@@@@@@@@@@@@@@@@@@"+xmlWMResponse.selectPath("//" +valHeader)[0]);   //OfferNameList/OfferName')
/*
for(int countWM=0 ; countWM <= cursor.getSelectionCount() ; countWM++){
utils.setOutputData(sheetName,cursor.selectPath("//" +valHeader)[countWM],startAtRow,j1+2);
}
*/
}

/*
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[0];	
valCAP=resultCAP.getStringValue();

 utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
 */
}
}catch(Exception e){
	//log.error("Exception occured "+e.toString())
	valCAP=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}





}


		if(j1==0){
			
			utils.setOutputData(sheetName,testCaseNo,startingRow,j1);
			
		
			
		}
	if(j1==1){
		
			utils.setOutputData(sheetName,"CAP Response",startingRow,j1);
			utils.setOutputData(sheetName,"WM Response",endOfRow,j1);
		
		}
		
	if(ignoreComparision== "true"){
		
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		utils.setOutputData(sheetName,"",comResult,j1+2);
		ignoreComparision="false"
}else{
		if(valCAP == valWM){
		//log.info("*************1****************"+valCAP +"startingRow"+startingRow +"****"+(j1+2))
		//log.info("***********1******************"+valWM+"endOfRow"+endOfRow)
		//log.info("***********1******************"+comResult)
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		utils.setOutputData(sheetName,"",comResult,j1+2);
		
		}else{
			
		result="FAIL"
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2,true,"RED");
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		utils.setOutputData(sheetName,"",comResult,j1+2);
			
		
		}
}

	if(j1==columnsOutput-1){
			
		if (soapfaultflagCAP=="true" && soapfaultflagWM=="true"  ){
		//utils.setOutputData(sheetName,"SOAP FAULT",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		soapfault++;
		soapfaultflagCAP="false";
		soapfaultflagWM="false";
		contentCAP=""
		contentWM=""
		
		}else if(soapfaultflagCAP=="true" || soapfaultflagWM=="true"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+3);
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		failure++;
		soapfaultflagCAP="false";
		soapfaultflagWM="false";
		contentCAP=""
		contentWM=""	
			
		}else if(result=="FAIL"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		failure++;
					
		}else{
			
		utils.setOutputData(sheetName,"Pass",startingRow,columnsOutput+2,true,"GREEN");	
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		success++;
	
		}
	
		}


	
	}

				}


	
		

		
  } 
	  	
	comResult++
	comResult++
	utils.setOutputData(sheetName,"\r\n\n------- Summary-------- \r\n",comResult++,1);
	
	utils.setOutputData(sheetName,"Total Test Cases- ",comResult,1);
	testRunner.getTestCase().getTestSuite().setPropertyValue("Total Test Cases",totalTestCases+"");
	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+0;
	}else{
	soapUIResponse=soapUIResponse+","+totalTestCases;
	}
	utils.setOutputData(sheetName,totalTestCases,comResult++,2);
	utils.setOutputData(sheetName,"Success",comResult,1,true, "GREEN");
	testRunner.getTestCase().getTestSuite().setPropertyValue("Success",success+"");
	soapUIResponse=soapUIResponse+","+success;
	utils.setOutputData(sheetName,success,comResult++,2);
	utils.setOutputData(sheetName,"Failure",comResult,1,true,"RED");
	testRunner.getTestCase().getTestSuite().setPropertyValue("Failure",failure+"");
	soapUIResponse=soapUIResponse+","+failure;
	utils.setOutputData(sheetName,failure,comResult++,2);
	utils.setOutputData(sheetName,"SOAP-FAULT",comResult,1,true,"RED");
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-FAULT",soapfault+"");
	soapUIResponse=soapUIResponse+","+soapfault;

	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+testRunner.getTestCase().getTestSuite().getPropertyValue("SOAP-ERROR");
	}else{
	soapUIResponse=soapUIResponse+","+"0";
	}
	
	utils.setOutputData(sheetName,soapfault,comResult++,2);	
	//soapUIResponse=soapUIResponse+","+comResult;
	
	soapUIResponse=soapUIResponse+"::";

	
	
	
	
	
}
}

soapUIResponse=soapUIResponse.substring(0,soapUIResponse.lastIndexOf("::"));
log.info("soapUIResponse for UI ::: "+soapUIResponse);
testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
project.removeInterface( iface );
}

catch(Exception e){
	log.error("Exception occured in main module "+e.toString())
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",e.toString());
	soapUIResponse=testRunner.getTestCase().getTestSuite().getPropertyValue("soapUIResponse");
	soapUIResponse=soapUIResponse+","+e.toString()+", CAE execution error- Refer CAE logs for more details";
	testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
	project.removeInterface( iface );
}




]]></script></con:config></con:testStep><con:properties><con:property><con:name>inputColumnSheet</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputColumnSheet</con:name><con:value>GetWOServiceDetailsRes</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>valCAP10</con:name><con:value>OP_AddressLine3</con:value></con:property><con:property><con:name>valCAP11</con:name><con:value>OP_AddressLine4</con:value></con:property><con:property><con:name>valCAP12</con:name><con:value>AttributeValue</con:value></con:property><con:property><con:name>valCAP13</con:name><con:value>CustomerTelephone</con:value></con:property><con:property><con:name>valCAP14</con:name><con:value>CustomerEmail</con:value></con:property><con:property><con:name>valCAP15</con:name><con:value>OP_ShippingDate</con:value></con:property><con:property><con:name>valCAP16</con:name><con:value>PrimaryEmailAddress</con:value></con:property><con:property><con:name>valCAP17</con:name><con:value>SecondaryEmailAddress2</con:value></con:property><con:property><con:name>valCAP18</con:name><con:value>SecondaryEmailAddress3</con:value></con:property><con:property><con:name>valCAP19</con:name><con:value>PreferredMethodOfNotificationCode</con:value></con:property><con:property><con:name>valCAP20</con:name><con:value>AuthorizedUser1</con:value></con:property><con:property><con:name>valCAP21</con:name><con:value>AuthorizedUser2</con:value></con:property><con:property><con:name>valCAP22</con:name><con:value>AuthorizedUser3</con:value></con:property><con:property><con:name>valCAP23</con:name><con:value>AuthorizedUser4</con:value></con:property><con:property><con:name>valCAP24</con:name><con:value>AuthorizedUser5</con:value></con:property><con:property><con:name>valCAP25</con:name><con:value>AuthorizedUser6</con:value></con:property><con:property><con:name>valCAP26</con:name><con:value>AuthorizedUser7</con:value></con:property><con:property><con:name>valCAP27</con:name><con:value>AuthorizedUser8</con:value></con:property><con:property><con:name>valCAP28</con:name><con:value>AuthorizedUser9</con:value></con:property><con:property><con:name>valCAP29</con:name><con:value>AuthorizedUser10</con:value></con:property><con:property><con:name>valCAP30</con:name><con:value>CFEFlag</con:value></con:property><con:property><con:name>valCAP31</con:name><con:value>CFECode</con:value></con:property><con:property><con:name>valCAP32</con:name><con:value>CFEReason</con:value></con:property><con:property><con:name>valCAP33</con:name><con:value>EmailValidatedFlag</con:value></con:property><con:property><con:name>valCAP34</con:name><con:value>BillType</con:value></con:property><con:property><con:name>valCAP35</con:name><con:value>InsideWiring</con:value></con:property><con:property><con:name>valCAP36</con:name><con:value>TarCode</con:value></con:property><con:property><con:name>valCAP37</con:name><con:value>UnservicableAddress</con:value></con:property><con:property><con:name>valCAP38</con:name><con:value>PrimaryLocationCode</con:value></con:property><con:property><con:name>valCAP39</con:name><con:value>SecondaryLocationCode</con:value></con:property><con:property><con:name>valCAP40</con:name><con:value>SignalAccess</con:value></con:property><con:property><con:name>valCAP41</con:name><con:value>Headend</con:value></con:property><con:property><con:name>valCAP42</con:name><con:value>Node</con:value></con:property><con:property><con:name>valCAP43</con:name><con:value>HousePrimaryOutlet</con:value></con:property><con:property><con:name>valCAP44</con:name><con:value>HouseAdditionalOutlet</con:value></con:property><con:property><con:name>valCAP45</con:name><con:value>Cabinet</con:value></con:property><con:property><con:name>valCAP46</con:name><con:value>Interactive</con:value></con:property><con:property><con:name>valCAP47</con:name><con:value>Gridid</con:value></con:property><con:property><con:name>valCAP48</con:name><con:value>Latitude</con:value></con:property><con:property><con:name>valCAP49</con:name><con:value>Longitude</con:value></con:property><con:property><con:name>outputFileName2</con:name><con:value>GetCustomerAccountByACNO</con:value></con:property><con:property><con:name>outputFileName3</con:name><con:value>DeleteCustomerBilling</con:value></con:property><con:property><con:name>valCAP50</con:name><con:value>HouseDevelopmentNumber</con:value></con:property><con:property><con:name>valCAP51</con:name><con:value>Elevation</con:value></con:property><con:property><con:name>valCAP52</con:name><con:value>TrunkRoute</con:value></con:property><con:property><con:name>valCAP53</con:name><con:value>Cascade</con:value></con:property><con:property><con:name>valCAP54</con:name><con:value>PowerSupply</con:value></con:property><con:property><con:name>valCAP55</con:name><con:value>Feeder</con:value></con:property><con:property><con:name>valCAP56</con:name><con:value>LineExtn</con:value></con:property><con:property><con:name>valCAP57</con:name><con:value>Addressable</con:value></con:property><con:property><con:name>valCAP58</con:name><con:value>TagNumber</con:value></con:property><con:property><con:name>valCAP59</con:name><con:value>SecondaryTagNumber</con:value></con:property><con:property><con:name>valCAP60</con:name><con:value>TurnHotDate</con:value></con:property><con:property><con:name>valCAP61</con:name><con:value>FirstDropDate</con:value></con:property><con:property><con:name>valCAP62</con:name><con:value>ReplaceDropDate</con:value></con:property><con:property><con:name>valCAP63</con:name><con:value>PreWired</con:value></con:property><con:property><con:name>valCAP64</con:name><con:value>CountyCode</con:value></con:property><con:property><con:name>valCAP65</con:name><con:value>ReplaceOutletDate</con:value></con:property><con:property><con:name>valCAP66</con:name><con:value>CoordinatesRange</con:value></con:property><con:property><con:name>valCAP67</con:name><con:value>CoordinatesTownship</con:value></con:property><con:property><con:name>valCAP70</con:name><con:value>CensusTract</con:value></con:property><con:property><con:name>valCAP71</con:name><con:value>PrismCode</con:value></con:property><con:property><con:name>valCAP72</con:name><con:value>BillingUnit</con:value></con:property><con:property><con:name>valCAP73</con:name><con:value>ProjectNumber</con:value></con:property><con:property><con:name>valCAP74</con:name><con:value>SICCode</con:value></con:property><con:property><con:name>valCAP75</con:name><con:value>SubDefCode</con:value></con:property><con:property><con:name>valCAP76</con:name><con:value>OP_ServiceStatus</con:value></con:property><con:property><con:name>valCAP77</con:name><con:value>OP_USPSSuffixCode</con:value></con:property><con:property><con:name>valCAP78</con:name><con:value>OP_AssociationCode</con:value></con:property><con:property><con:name>valCAP79</con:name><con:value>OP_HouseAmp</con:value></con:property><con:property><con:name>valCAP80</con:name><con:value>OP_RateCenter</con:value></con:property><con:property><con:name>OutputFileName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputFileName1</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>FileName</con:name><con:value>outputFileName1,</con:value></con:property><con:property><con:name>valCAP2</con:name><con:value>SK_Type</con:value></con:property><con:property><con:name>valCAP3</con:name><con:value>SK_Test case description</con:value></con:property><con:property><con:name>valCAP4</con:name><con:value>OP_version</con:value></con:property><con:property><con:name>valCAP5</con:name><con:value>OP_user</con:value></con:property><con:property><con:name>valCAP6</con:name><con:value>clientIdentifier</con:value></con:property><con:property><con:name>valCAP7</con:name><con:value>SiteId</con:value></con:property><con:property><con:name>valCAP8</con:name><con:value>WorkOrderNumber</con:value></con:property><con:property><con:name>valCAP9</con:name><con:value>OP_cus:Name</con:value></con:property><con:property><con:name>outputFileName4</con:name><con:value>deleteAgent</con:value></con:property><con:property><con:name>outputFileName5</con:name><con:value>ValidateDropShip</con:value></con:property><con:property><con:name>outputFileName6</con:name><con:value>GetCstmrCollectionEventInfo</con:value></con:property><con:property><con:name>Total Test Cases</con:name><con:value>1</con:value></con:property><con:property><con:name>Success</con:name><con:value>1</con:value></con:property><con:property><con:name>Failure</con:name><con:value>0</con:value></con:property><con:property><con:name>SOAP-FAULT</con:name><con:value>0</con:value></con:property><con:property><con:name>soapUIResponse</con:name><con:value>getWOServiceDetails,1,1,0,0,0</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>GetWOServiceDetails4_12_16_9_14_PM314_Report.xls</con:value></con:property><con:property><con:name>SOAP-ERROR</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>operationName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>valCAP0</con:name><con:value>SK_Test case#</con:value></con:property><con:property><con:name>valCAP1</con:name><con:value>SK_Scenario</con:value></con:property><con:property><con:name>outputFileName9</con:name><con:value>getUserByNetworkLoginAndDomain</con:value></con:property></con:properties><con:setupScript>def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String filePath=utils.getFilePath(project, project.getName()+"_Report.xls");
//log.info(filePath)
def f = new File(filePath)
f.delete()</con:setupScript><con:tearDownScript><![CDATA[import java.text.DateFormat
def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String sheetName=testSuite.getPropertyValue("FileName");
String outputFileName=testSuite.getPropertyValue("outputFileName");



//log.info("outputFileName****"+outputFileName);
String[] sheetNameArray=sheetName.split(",");
def today = new Date()
def plainFormatter = DateFormat.instance
//log.info(plainFormatter.format(today));
def dateString=plainFormatter.format(today)
//log.info(dateString)
dateString=dateString.replaceAll('/','_');
dateString=dateString.replaceAll(' ','_');
dateString=dateString.replaceAll(':','_');
//log.info(dateString)

String ranDomNumber=Math.abs(new Random().nextInt() % 600) + 1 ; 
dateString=dateString+ranDomNumber;
//log.info(dateString)
String opName=testSuite.getPropertyValue("operationName"); 
//String outputFile=project.getName()+ranDomNumber+"_Report.xls"; 
String outputFile=opName+dateString+"_Report.xls";

//log.info("****"+outputFile);

testSuite.setPropertyValue("resultFileName",outputFile);

 String outputFilePath=project.getPropertyValue("outputFilePath");
//String filePath=utils.getFilePath(outputFilePath,outputFile );
String filePath=utils.getFilePath(project,outputFile );
//log.info("********"+outputFilePath);
String fileLocation=outputFilePath+outputFile;

String soapError=testSuite.getPropertyValue("SOAP-ERROR");
//log.error("soapError"+soapError);
if (soapError == null){

def fileSubStr = outputFileName

//List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /GetWOServiceDetails\.xls$/ }
List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /${outputFileName}/ }
//log.info("********"+files.size());

 File archieveDir = new File(outputFilePath +"//archive");

// Tests whether the directory denoted by this abstract pathname exists.
      boolean exists = archieveDir.exists();

     // log.error(exists)
if(exists == false){
	archieveDir.mkdir();
}


for (int i=0 ; i < files.size();i++){
    		//log.info("&&&&&&-"+files.get(i))
    		if(files[i].getName().indexOf(".xls") != -1){
    	   if(files[i].renameTo(new File(outputFilePath +"\\archive\\" + files[i].getName()))){
    		//log.info("File is moved successful!");
    	   }else{
    		//log.info("File is failed to move!");
    	   }
    		}else{
    			i++;
    		}
}    

//log.info("********"+fileLocation);
//log.info(utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[0])))
for (i=0;i<sheetNameArray.length;i++)
{
	
	//utils.writeInFile(filePath, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.writeInFile(fileLocation, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.dataCleanUp(testSuite.getPropertyValue(sheetNameArray[i]));
}
}
//String sheetName=testSuite.getPropertyValue("FileName");

//String sheetName=testSuite.getName();

	//--------------------START Writing in file--------------------
	
	//log.info("filePath: "+filePath+"\n Writing in file.............")
	
	//utils.dataCleanUp(sheetName);
	//utils.dataCleanUp(outputFileName);
project.setPropertyValue("endpoint1",null)
project.setPropertyValue("endpoint2",null) 
testSuite.setPropertyValue("SOAP-ERROR",null);
log.info("Finished");]]></con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Run Engine" id="0bceafd0-8de7-4fca-acc8-441d702d7d3f"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCaseStep" searchProperties="true" id="16af6294-4d69-4b05-b53f-440bc650348d"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="e8445486-8ba7-4675-9dee-88c880cd34ea"><con:settings/><con:config><script><![CDATA[import jxl.*
import java.util.*;
import jxl.write.*;
import jxl.write.Boolean;
import jxl.write.Number;
import jxl.write.biff.RowsExceededException;
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.impl.wsdl.WsdlProject
import com.eviware.soapui.impl.wsdl.WsdlInterface
import com.eviware.soapui.impl.WsdlInterfaceFactory
import com.eviware.soapui.impl.wsdl.WsdlOperation
import com.eviware.soapui.impl.wsdl.WsdlRequest
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.impl.wsdl.WsdlSubmitContext;
import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.model.iface.Response;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlOptions;
import com.eviware.soapui.impl.wsdl.actions.iface.RemoveInterfaceAction;





def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def projectDir = groovyUtils.projectPath
//log.info(projectDir);
String endPointCAP="";
String endPointWM="";

def project = testRunner.getTestCase().getTestSuite().getProject();
def utils = project.runAfterLoadScript();
def testCase = testRunner.testCase;
WsdlProject wsdlproject = new WsdlProject() 
WsdlInterface iface 
WsdlOperation operation
XmlObject resultWM
XmlObject resultCAP
int startingRow=0;
int endOfRow =1;
int comResult=2; 
int startAtRow  = 0
String testCaseNo
String FileName=""
String sheetName=""
int rowCounter=0;
String operationName=""
String readWSDL="false";
String soapUIResponse="";
try {
def testSuite = testRunner.getTestCase().getTestSuite()
def wsdlName = project.getPropertyValue("wsdlName");
def dataSheetName = project.getPropertyValue("dataSheetName");
def opName=  project.getPropertyValue("operationName");
def env= project.getPropertyValue("env");
testSuite.setPropertyValue("operationName",opName); 
def outputFilePath=project.getPropertyValue("outputFilePath");
//log.info(wsdlName);
//log.info(dataSheetName)
//File fp = new File(projectDir+"/"+dataSheetName) 	
File fp = new File(outputFilePath+dataSheetName)
//log.info(fp)	
	wb = Workbook.getWorkbook(fp)
	Endpoint = wb.getSheet("Endpoint")
	countRows = Endpoint.getRows()
	countColumns=Endpoint.getColumns()
	def  readEndpoints = new String[countRows];
	
	int r=0;
			for (int readRow=1 ;readRow < countRows;readRow++){
		//	log.info(Endpoint.getCell(0, readRow).getContents().trim())
			
			if(Endpoint.getCell(0, readRow).getContents().trim()=='run'){
				
			for (int j=0 ;j < countColumns;j++){
				
				readEndpoints[readRow]=Endpoint.getCell(0, readRow).getContents().trim()	
				
				if(readEndpoints[readRow]=='run'){
					j++;
				//	log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					if(readWSDL == "false"){
						//log.info(project)
						//log.info(projectDir)
						//log.info(Endpoint.getCell(j, readRow).getContents().trim())
						//log.info(projectDir+"/"+wsdlName)
						
					//iface= WsdlInterfaceFactory.importWsdl(project, projectDir+"/"+wsdlName, true )[0]
					iface= WsdlInterfaceFactory.importWsdl(project, outputFilePath+"/"+wsdlName, true )[0]
					
					 //log.info(2)
					 readWSDL="true";
					}
					//log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					testSuite.setPropertyValue("OutputFileName",Endpoint.getCell(j, readRow).getContents().trim().substring(0,Endpoint.getCell(j, readRow).getContents().trim().indexOf(".")));
				
					j++;
					operationName=Endpoint.getCell(j, readRow).getContents().trim();
					//log.info(operationName)
					soapUIResponse=soapUIResponse+operationName;
					testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse+",0,0,0");
					operation = (WsdlOperation) iface.getOperationByName(operationName) 
					//log.info(" operation -  "+operationName)
					j++;
					testCase.setPropertyValue("inputColumnSheet", Endpoint.getCell(j,readRow).getContents().trim());
					testSuite.setPropertyValue("outputFileName"+readRow, Endpoint.getCell(j,readRow).getContents().trim());
					FileName=FileName.concat("outputFileName"+readRow+",");
					testSuite.setPropertyValue("FileName",FileName);
					
					j++;
					testCase.setPropertyValue("outputColumnSheet", Endpoint.getCell(j, readRow).getContents().trim());
					j++;
					endPointWM=Endpoint.getCell(j, readRow).getContents().trim()
					j++;
					endPointCAP=Endpoint.getCell(j,readRow).getContents().trim()	
					if((project.getPropertyValue("endpoint1") != null)){
						endPointCAP=project.getPropertyValue("endpoint1");
					}

						if(project.getPropertyValue("endpoint2") != null){
						endPointWM=project.getPropertyValue("endpoint2");
					}
					log.info("endPointCAP--"+endPointCAP)
					log.info("endPointWM--"+endPointWM)
					
					
					
						}
				
				}
		
			
			


	int row= 0;
	
	sheet = wb.getSheet(testCase.getPropertyValue("inputColumnSheet"))
	columns = sheet.getColumns()
	rows = sheet.getRows()
	columns=sheet.getColumns()
	int startAtColumn = 0
	int totalTestCases=rows - 1;
	int success=0;
	int failure=0;	
	int soapfault=0;
	String soapfaultflagCAP="false"
	String soapfaultflagWM="false"
	startAtRow  = 0
	testCaseNo=0
	String contentCAP
	String contentWM
	String unretrybleError="false"
	String filterList="";
	
	def  valCAP	= new String[columns];

	
for (int j=1 ;j < columns;j++)
	{
		valCAP[j]=sheet.getCell(j, 0).getContents().trim()
		testSuite.setPropertyValue("valCAP"+j, sheet.getCell(j, startAtRow).getContents().trim());
		//log.info(sheet.getCell(j, startAtRow).getContents().trim())
		 if(sheet.getCell(j, startAtRow).getContents().trim().indexOf("SK_") != -1){
                                                filterList=filterList + ","+j;
                                }
	}
	//log.info(filterList)
	int countRow=1;	

for (int i =1; i<rows; i++)
	{
			if(i==1){
			success=0;
			failure=0;
			soapfault=0;
			startingRow=1;
			endOfRow =2;
			comResult=3; 
			}else{
			startingRow=startingRow+3;
			endOfRow=endOfRow+3;
			comResult=comResult+3;	
			}
			log.info("Excecuting Test case# "+i);
			//log.info("----------------------------"+startingRow);
			WsdlRequest requestCAP = operation.addNewRequest("requestCAP") 
			def capRequest = operation.createRequest(true) 
			requestCAP.setRequestContent(capRequest) ;
			requestCAP.setEndpoint(endPointCAP);
			//requestCAP.submit(new WsdlSubmitContext(requestCAP),false)
			def holderCAP = new XmlHolder(capRequest)

			
			WsdlRequest requestWM = operation.addNewRequest("requestWM") 
			def wmRequest = operation.createRequest(true) 
			requestWM.setRequestContent(wmRequest) ;
			requestWM.setEndpoint(endPointWM);
			def holderWM = new XmlHolder(wmRequest)
		
		
		for (int j=1 ;j < columns;j++)
		 	{
				if( filterList.indexOf(j+"") != -1){
                                                   continue;
				}
		 		//log.info(testSuite.getPropertyValue("valCAP"+j))
		 		
		 		if ( testSuite.getPropertyValue("valCAP"+j).indexOf("OP_").equals(-1)){
		 		//log.info(testSuite.getPropertyValue("valCAP"+j).indexOf("OP_"))
				holderCAP.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
				holderWM.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
			
			}else{
				
				
				String removeVal=testSuite.getPropertyValue("valCAP"+j).substring(3);
				//log.info("removing optional node ---"+removeVal)
				//log.info(holderCAP.containsKey(removeVal))
				
				holderCAP.removeDomNodes("//"+removeVal) 
				holderWM.removeDomNodes("//"+removeVal) 
			
			}
		 	}

			requestCAP.setRequestContent(holderCAP.getXml())
			String responseCAPContent
			String responseWMContent
			String content
			 XmlObject xmlWMResponse
			 XmlObject xmlCAPResponse

if(env =="CAP"){
				try{
			WsdlSubmit submitCAP = (WsdlSubmit) requestCAP.submit( new WsdlSubmitContext(requestCAP), false );
			Response responseCAP = submitCAP.getResponse();
			responseCAPContent= responseCAP.getContentAsString();
			 xmlCAPResponse = XmlUtils.createXmlObject( responseCAPContent );
			 contentCAP=responseCAPContent;
			}catch(Exception e){
			contentCAP="CAP Socket Time Out Endpoint -" +endPointCAP ;
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			//log.error(contentCAP);
			break;
			}
			if(responseCAPContent.indexOf("No service was found")!= -1){
				contentCAP="No service was found at CAP endpoint -" +endPointCAP ;
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
				//log.error(contentCAP);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
			//log.error(responseCAPContent)
			if(responseCAPContent.indexOf("errorCode")== -1 && responseCAPContent.indexOf(":Fault")!= -1){
			if(responseCAPContent.indexOf("<soap:Text")!= -1 || responseCAPContent.indexOf("faultcode")!= -1){
				
				if(responseCAPContent.indexOf("<soap:Text")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("<soap:Text"),responseCAPContent.indexOf("</soap:Text>")) ;
				}else if(responseCAPContent.indexOf("<soap:Fault")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soap:Fault"),responseCAPContent.indexOf("</soap:Fault>")) ;	
				}else if(responseCAPContent.indexOf("<soapenv:Fault")!= -1 ){

				contentCAP="SOAP ENV FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soapenv:Fault"),responseCAPContent.indexOf("</soapenv:Fault>")) ;	
				}
				soapfaultflagCAP="true"
			}else{
				contentCAP="SOAP FAULT:"+responseCAPContent ;
				soapfaultflagCAP="false"
			}
				
				//log.error("soapfaultflagCAP"+soapfaultflagCAP);
				//log.error(contentCAP);
				
				

			}


			sheetOutput = wb.getSheet(testCase.getPropertyValue("outputColumnSheet"))	
			columnsOutput = sheetOutput.getColumns()
			rowsOutput = sheetOutput.getRows()
			testCaseNo= i;
		
			String result="PAAS"
			String ignoreComparision="false"

			for (int i1 =0; i1<rowsOutput; i1++) {	
					

	for (int j1=0 ;j1 < columnsOutput;j1++){
		
		 sheetName=testSuite.getPropertyValue("outputFileName"+readRow);
		valHeader =sheetOutput.getCell(j1, startAtRow).getContents().trim();
		//log.error("valHeader"+valHeader);
		
		if(valHeader.indexOf("IG_") != -1){
			try{
			resultCAP=xmlCAPResponse.selectPath("//" +valHeader.substring(3))[0];	
			valCAP=resultCAP.getStringValue();
			ignoreComparision="true"
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}catch(Exception e){
			valCAP=""
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}
		
		}else{
try{	
	//log.info("-----valHeader"+valHeader)
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[0];	
valCAP=resultCAP.getStringValue();
//log.info("*************valCAP"+valCAP)
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}catch(Exception e){
	//log.error("Exception occured "+e.toString())
	valCAP=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}

}
		if(j1==0){
			
			utils.setOutputData(sheetName,testCaseNo,startingRow,j1);
			
		}
	if(j1==1){


	utils.setOutputData(sheetName,"CAP Response",startingRow,j1);
	
		}
		
	if(ignoreComparision== "true"){
		
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);
		ignoreComparision="false"
}
utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);

	if(j1==columnsOutput-1){
		if (soapfaultflagCAP=="true"){		// && soapfaultflagWM=="true"  ){
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+2,true,"RED");
		soapfault++;
		soapfaultflagCAP="false";
		contentCAP=""
		
		}else if(soapfaultflagCAP=="true"){  // || soapfaultflagWM=="true"){
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+3);
		failure++;
		soapfaultflagCAP="false";
		contentCAP=""
			
		}else if(result=="FAIL"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		failure++;
					
		}else{
		
		utils.setOutputData(sheetName,"Pass",startingRow,columnsOutput+2,true,"GREEN");	
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		success++;
		
		}
		
		}


	
	}
				
				}


}

if(env!="CAP"){
			 requestWM.setRequestContent(holderWM.getXml())

			 try{
			WsdlSubmit submitWM = (WsdlSubmit) requestWM.submit( new WsdlSubmitContext(requestWM), false );
			Response responseWM = submitWM.getResponse();
			responseWMContent = responseWM.getContentAsString();
			xmlWMResponse = XmlUtils.createXmlObject( responseWMContent );	
			contentWM=responseWMContent;
			}catch(Exception e){
			contentWM="WM Socket Time Out Endpoint -" +endPointWM ;
			//log.error(contentWM);
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			break;
			}
			if(responseWMContent.indexOf("No service was found")!= -1){
				contentWM="No service was found at WM endpoint-" +endPointWM ;
				//log.error(contentWM);
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
			//log.error(responseWMContent)
			if(responseWMContent.indexOf("errorCode")== -1 && responseWMContent.indexOf(":Fault")!= -1){
				if(responseWMContent.indexOf("<webM:message")!= -1){
				contentWM="SOAP FAULT:"+responseWMContent.substring(responseWMContent.indexOf("<webM:message"),responseWMContent.indexOf("</webM:message>")) ;
				soapfaultflagWM="true"
				}else{
					contentWM=responseWMContent;
					soapfaultflagWM="false"
				}
				//log.error("soapfaultflagWM"+soapfaultflagWM);
				//log.error(contentWM);
				
			}

			sheetOutput = wb.getSheet(testCase.getPropertyValue("outputColumnSheet"))	
			columnsOutput = sheetOutput.getColumns()
			rowsOutput = sheetOutput.getRows()
			testCaseNo= i;
		
			String result="PAAS"
			String ignoreComparision="false"

			for (int i1 =0; i1<rowsOutput; i1++) {	
					

	for (int j1=0 ;j1 < columnsOutput;j1++){
		
		 sheetName=testSuite.getPropertyValue("outputFileName"+readRow);
		valHeader =sheetOutput.getCell(j1, startAtRow).getContents().trim();
	//	log.error("valHeader"+valHeader);
		
		if(valHeader.indexOf("IG_") != -1){
			try{
		resultWM=xmlWMResponse.selectPath("//" +valHeader.substring(3))[0];	
		valWM=resultWM.getStringValue();
		ignoreComparision="true"
		utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}catch(Exception e){
			//log.error("Exception occured "+e.toString())
		//	valCAP=""
			valWM=""
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
			
	
		}
		
				
		}else{

try{	
resultWM=xmlWMResponse.selectPath("//" +valHeader)[0];	
valWM=resultWM.getStringValue();
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}catch(Exception e){
	//log.error("Exception occured "+e.toString())
	valWM=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}




}

		if(j1==0){
			
			utils.setOutputData(sheetName,testCaseNo,startingRow,j1);
			
		}
	if(j1==1){

	utils.setOutputData(sheetName,"WM Response",startingRow,j1);

		
		}
		
	if(ignoreComparision== "true"){
		
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		ignoreComparision="false"
}


utils.setOutputData(sheetName,valWM+"",startingRow,j1+2);
	if(j1==columnsOutput-1){
		if (soapfaultflagWM=="true"){		// && soapfaultflagWM=="true"  ){
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		soapfault++;
		soapfaultflagWM="false";
		contentWM=""
		
		}else if(soapfaultflagWM=="true"){  // || soapfaultflagWM=="true"){
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		failure++;
		soapfaultflagWM="false";
		contentWM=""	
			
		}else if(result=="FAIL"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		failure++;
					
		}else{
		
		utils.setOutputData(sheetName,"Pass",startingRow,columnsOutput+2,true,"GREEN");	
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		success++;
		
		}
		
		}


	
	}
				
				}

		
}		

  }   	
	comResult++
	comResult++
	utils.setOutputData(sheetName,"\r\n\n------- Summary-------- \r\n",comResult++,1);
	//log.info(comResult);
	utils.setOutputData(sheetName,"Total Test Cases- ",comResult,1);
	testRunner.getTestCase().getTestSuite().setPropertyValue("Total Test Cases",totalTestCases+"");
	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+0;
	}else{
	soapUIResponse=soapUIResponse+","+totalTestCases;
	}
	utils.setOutputData(sheetName,totalTestCases,comResult++,2);
	utils.setOutputData(sheetName,"Success",comResult,1,true, "GREEN");
	testRunner.getTestCase().getTestSuite().setPropertyValue("Success",success+"");
	soapUIResponse=soapUIResponse+","+success;
	utils.setOutputData(sheetName,success,comResult++,2);
	utils.setOutputData(sheetName,"SOAP-FAULT",comResult,1,true,"RED");
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-FAULT",soapfault+"");
	soapUIResponse=soapUIResponse+","+soapfault;

	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+testRunner.getTestCase().getTestSuite().getPropertyValue("SOAP-ERROR");
	}else{
	soapUIResponse=soapUIResponse+","+"0";
	}
	
	utils.setOutputData(sheetName,soapfault,comResult++,2);	
	//soapUIResponse=soapUIResponse+","+comResult;
	
	soapUIResponse=soapUIResponse+"::";

	
	
	
	
	
}
}

soapUIResponse=soapUIResponse.substring(0,soapUIResponse.lastIndexOf("::"));
log.info("soapUIResponse for UI ::: "+soapUIResponse);
testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
project.removeInterface( iface );
}

catch(Exception e){
	log.error("Exception occured in main module "+e.toString())
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",e.toString());
	soapUIResponse=testRunner.getTestCase().getTestSuite().getPropertyValue("soapUIResponse");
	soapUIResponse=soapUIResponse+","+e.toString()+", CAE execution error- Refer CAE logs for more details";
	testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
	project.removeInterface( iface );
}




]]></script></con:config></con:testStep><con:properties><con:property><con:name>inputColumnSheet</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputColumnSheet</con:name><con:value>GetWOServiceDetailsRes</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>valCAP10</con:name><con:value>TransactionTimeStamp</con:value></con:property><con:property><con:name>valCAP11</con:name><con:value>OP_AddressLine4</con:value></con:property><con:property><con:name>valCAP12</con:name><con:value>AttributeValue</con:value></con:property><con:property><con:name>valCAP13</con:name><con:value>CustomerTelephone</con:value></con:property><con:property><con:name>valCAP14</con:name><con:value>CustomerEmail</con:value></con:property><con:property><con:name>valCAP15</con:name><con:value>OP_ShippingDate</con:value></con:property><con:property><con:name>valCAP16</con:name><con:value>PrimaryEmailAddress</con:value></con:property><con:property><con:name>valCAP17</con:name><con:value>SecondaryEmailAddress2</con:value></con:property><con:property><con:name>valCAP18</con:name><con:value>SecondaryEmailAddress3</con:value></con:property><con:property><con:name>valCAP19</con:name><con:value>PreferredMethodOfNotificationCode</con:value></con:property><con:property><con:name>valCAP20</con:name><con:value>AuthorizedUser1</con:value></con:property><con:property><con:name>valCAP21</con:name><con:value>AuthorizedUser2</con:value></con:property><con:property><con:name>valCAP22</con:name><con:value>AuthorizedUser3</con:value></con:property><con:property><con:name>valCAP23</con:name><con:value>AuthorizedUser4</con:value></con:property><con:property><con:name>valCAP24</con:name><con:value>AuthorizedUser5</con:value></con:property><con:property><con:name>valCAP25</con:name><con:value>AuthorizedUser6</con:value></con:property><con:property><con:name>valCAP26</con:name><con:value>AuthorizedUser7</con:value></con:property><con:property><con:name>valCAP27</con:name><con:value>AuthorizedUser8</con:value></con:property><con:property><con:name>valCAP28</con:name><con:value>AuthorizedUser9</con:value></con:property><con:property><con:name>valCAP29</con:name><con:value>AuthorizedUser10</con:value></con:property><con:property><con:name>valCAP30</con:name><con:value>CFEFlag</con:value></con:property><con:property><con:name>valCAP31</con:name><con:value>CFECode</con:value></con:property><con:property><con:name>valCAP32</con:name><con:value>CFEReason</con:value></con:property><con:property><con:name>valCAP33</con:name><con:value>EmailValidatedFlag</con:value></con:property><con:property><con:name>valCAP34</con:name><con:value>BillType</con:value></con:property><con:property><con:name>valCAP35</con:name><con:value>InsideWiring</con:value></con:property><con:property><con:name>valCAP36</con:name><con:value>TarCode</con:value></con:property><con:property><con:name>valCAP37</con:name><con:value>UnservicableAddress</con:value></con:property><con:property><con:name>valCAP38</con:name><con:value>PrimaryLocationCode</con:value></con:property><con:property><con:name>valCAP39</con:name><con:value>SecondaryLocationCode</con:value></con:property><con:property><con:name>valCAP40</con:name><con:value>SignalAccess</con:value></con:property><con:property><con:name>valCAP41</con:name><con:value>Headend</con:value></con:property><con:property><con:name>valCAP42</con:name><con:value>Node</con:value></con:property><con:property><con:name>valCAP43</con:name><con:value>HousePrimaryOutlet</con:value></con:property><con:property><con:name>valCAP44</con:name><con:value>HouseAdditionalOutlet</con:value></con:property><con:property><con:name>valCAP45</con:name><con:value>Cabinet</con:value></con:property><con:property><con:name>valCAP46</con:name><con:value>Interactive</con:value></con:property><con:property><con:name>valCAP47</con:name><con:value>Gridid</con:value></con:property><con:property><con:name>valCAP48</con:name><con:value>Latitude</con:value></con:property><con:property><con:name>valCAP49</con:name><con:value>Longitude</con:value></con:property><con:property><con:name>outputFileName2</con:name><con:value>getAgent</con:value></con:property><con:property><con:name>outputFileName3</con:name><con:value>updateAgent</con:value></con:property><con:property><con:name>valCAP50</con:name><con:value>HouseDevelopmentNumber</con:value></con:property><con:property><con:name>valCAP51</con:name><con:value>Elevation</con:value></con:property><con:property><con:name>valCAP52</con:name><con:value>TrunkRoute</con:value></con:property><con:property><con:name>valCAP53</con:name><con:value>Cascade</con:value></con:property><con:property><con:name>valCAP54</con:name><con:value>PowerSupply</con:value></con:property><con:property><con:name>valCAP55</con:name><con:value>Feeder</con:value></con:property><con:property><con:name>valCAP56</con:name><con:value>LineExtn</con:value></con:property><con:property><con:name>valCAP57</con:name><con:value>Addressable</con:value></con:property><con:property><con:name>valCAP58</con:name><con:value>TagNumber</con:value></con:property><con:property><con:name>valCAP59</con:name><con:value>SecondaryTagNumber</con:value></con:property><con:property><con:name>valCAP60</con:name><con:value>TurnHotDate</con:value></con:property><con:property><con:name>valCAP61</con:name><con:value>FirstDropDate</con:value></con:property><con:property><con:name>valCAP62</con:name><con:value>ReplaceDropDate</con:value></con:property><con:property><con:name>valCAP63</con:name><con:value>PreWired</con:value></con:property><con:property><con:name>valCAP64</con:name><con:value>CountyCode</con:value></con:property><con:property><con:name>valCAP65</con:name><con:value>ReplaceOutletDate</con:value></con:property><con:property><con:name>valCAP66</con:name><con:value>CoordinatesRange</con:value></con:property><con:property><con:name>valCAP67</con:name><con:value>CoordinatesTownship</con:value></con:property><con:property><con:name>valCAP70</con:name><con:value>CensusTract</con:value></con:property><con:property><con:name>valCAP71</con:name><con:value>PrismCode</con:value></con:property><con:property><con:name>valCAP72</con:name><con:value>BillingUnit</con:value></con:property><con:property><con:name>valCAP73</con:name><con:value>ProjectNumber</con:value></con:property><con:property><con:name>valCAP74</con:name><con:value>SICCode</con:value></con:property><con:property><con:name>valCAP75</con:name><con:value>SubDefCode</con:value></con:property><con:property><con:name>valCAP76</con:name><con:value>OP_ServiceStatus</con:value></con:property><con:property><con:name>valCAP77</con:name><con:value>OP_USPSSuffixCode</con:value></con:property><con:property><con:name>valCAP78</con:name><con:value>OP_AssociationCode</con:value></con:property><con:property><con:name>valCAP79</con:name><con:value>OP_HouseAmp</con:value></con:property><con:property><con:name>valCAP80</con:name><con:value>OP_RateCenter</con:value></con:property><con:property><con:name>OutputFileName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputFileName1</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>FileName</con:name><con:value>outputFileName1,</con:value></con:property><con:property><con:name>valCAP2</con:name><con:value>SK_Type</con:value></con:property><con:property><con:name>valCAP3</con:name><con:value>SK_Test case description</con:value></con:property><con:property><con:name>valCAP4</con:name><con:value>OP_version</con:value></con:property><con:property><con:name>valCAP5</con:name><con:value>OP_user</con:value></con:property><con:property><con:name>valCAP6</con:name><con:value>clientIdentifier</con:value></con:property><con:property><con:name>valCAP7</con:name><con:value>SiteId</con:value></con:property><con:property><con:name>valCAP8</con:name><con:value>WorkOrderNumber</con:value></con:property><con:property><con:name>valCAP9</con:name><con:value>OP_cus:Name</con:value></con:property><con:property><con:name>outputFileName4</con:name><con:value>deleteAgent</con:value></con:property><con:property><con:name>outputFileName5</con:name><con:value>ValidateDropShip</con:value></con:property><con:property><con:name>outputFileName6</con:name><con:value>GetCstmrCollectionEventInfo</con:value></con:property><con:property><con:name>Total Test Cases</con:name><con:value>1</con:value></con:property><con:property><con:name>Success</con:name><con:value>0</con:value></con:property><con:property><con:name>Failure</con:name><con:value>0</con:value></con:property><con:property><con:name>SOAP-FAULT</con:name><con:value>0</con:value></con:property><con:property><con:name>soapUIResponse</con:name><con:value>getWOServiceDetails,0,0,0,CAP Socket Time Out Endpoint -http://catl0qa425.corp.cox.com:5555/ws/Cox_WorkOrderInquireInterface.pub.wsd.providers.WOServiceDetails.v2:WOServiceDetails/Cox_WorkOrderInquireInterface_pub_wsd_providers_WOServiceDetails_v2_WOServiceDetails_Port</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>creditInformation3_22_16_7_54_PM27_Report.xls</con:value></con:property><con:property><con:name>SOAP-ERROR</con:name><con:value>CAP Socket Time Out Endpoint -http://catl0qa425.corp.cox.com:5555/ws/Cox_WorkOrderInquireInterface.pub.wsd.providers.WOServiceDetails.v2:WOServiceDetails/Cox_WorkOrderInquireInterface_pub_wsd_providers_WOServiceDetails_v2_WOServiceDetails_Port</con:value></con:property><con:property><con:name>operationName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>valCAP0</con:name><con:value>SK_Test case#</con:value></con:property><con:property><con:name>valCAP1</con:name><con:value>SK_Scenario</con:value></con:property><con:property><con:name>outputFileName9</con:name><con:value>getUserByNetworkLoginAndDomain</con:value></con:property></con:properties><con:setupScript>def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String filePath=utils.getFilePath(project, project.getName()+"_Report.xls");
//log.info(filePath)
def f = new File(filePath)
f.delete()</con:setupScript><con:tearDownScript>import java.text.DateFormat
def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String sheetName=testSuite.getPropertyValue("FileName");
String outputFileName=testSuite.getPropertyValue("outputFileName");







//log.info(outputFileName);
String[] sheetNameArray=sheetName.split(",");
def today = new Date()
def plainFormatter = DateFormat.instance
//log.info(plainFormatter.format(today));
def dateString=plainFormatter.format(today)
//log.info(dateString)
dateString=dateString.replaceAll('/','_');
dateString=dateString.replaceAll(' ','_');
dateString=dateString.replaceAll(':','_');
//log.info(dateString)

String ranDomNumber=Math.abs(new Random().nextInt() % 600) + 1 ; 
dateString=dateString+ranDomNumber;
//log.info(dateString)
String opName=testSuite.getPropertyValue("operationName"); 
//String outputFile=project.getName()+ranDomNumber+"_Report.xls"; 
String outputFile=opName+dateString+"_Report.xls";

//log.info(outputFile);

testSuite.setPropertyValue("resultFileName",outputFile);

 String outputFilePath=project.getPropertyValue("outputFilePath");
//String filePath=utils.getFilePath(outputFilePath,outputFile );
String filePath=utils.getFilePath(project,outputFile );
//log.info("********"+filePath);
String fileLocation=outputFilePath+outputFile;
//log.info("********"+fileLocation);
//log.info(utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[0])))
for (i=0;i&lt;sheetNameArray.length;i++)
{
	
	//utils.writeInFile(filePath, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.writeInFile(fileLocation, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.dataCleanUp(testSuite.getPropertyValue(sheetNameArray[i]));
}

//String sheetName=testSuite.getPropertyValue("FileName");

//String sheetName=testSuite.getName();

	//--------------------START Writing in file--------------------
	
	//log.info("filePath: "+filePath+"\n Writing in file.............")
	
	//utils.dataCleanUp(sheetName);
	//utils.dataCleanUp(outputFileName);

log.info("Finished");</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Run Engine SOAP" id="fa7213ac-e28b-4e73-9842-521b47bdc9b5"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCaseStep" searchProperties="true" id="edb09aa0-f808-4f65-8040-3ab87cdda6df"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="92778e5f-bc26-4ea8-82b0-4f7193999f0c"><con:settings/><con:config><script><![CDATA[import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;

import jxl.Sheet;
import jxl.Workbook;

import com.eviware.soapui.impl.WsdlInterfaceFactory;
import com.eviware.soapui.impl.wsdl.WsdlInterface;
import com.eviware.soapui.impl.wsdl.WsdlOperation;
import com.eviware.soapui.impl.wsdl.WsdlProject;
import com.eviware.soapui.impl.wsdl.WsdlRequest;
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.impl.wsdl.WsdlSubmitContext;
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext;
//import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext;
import com.eviware.soapui.model.testsuite.TestCase;
import com.eviware.soapui.model.testsuite.TestCaseRunner;
//import com.eviware.soapui.model.testsuite.TestCaseRunner;
import com.eviware.soapui.model.testsuite.TestSuite;
import com.eviware.soapui.support.GroovyUtils;
import com.eviware.soapui.support.XmlHolder;

import org.apache.log4j.*;


WsdlProject project = (WsdlProject) testRunner.getTestCase().getTestSuite().getProject();
WsdlInterface[] ifaces = null;
WsdlOperation operation = null;
def utils = project.runAfterLoadScript();
//Utils utils = Utils.getInstance();
TestCase testCase = testRunner.getTestCase();
try{
	if(System.getProperty("catalina.base")!=null){
		String logFileName=System.getProperty("catalina.base")+"/logs/soapuiAPI.log";
		String logPattern=  "%d{yyyy-MM-dd HH:mm:ss.SSS} %C %m %n";
		String logFileRollup=  ".yyyy-MM-dd";
		//String logLevel=  context.expand( '${#Project#LOG_LEVEL}' )
		Layout layout = new PatternLayout(logPattern);
		DailyRollingFileAppender appender;
		try{
			appender = new DailyRollingFileAppender(layout, logFileName,logFileRollup);
			log = Logger.getRootLogger();
			log.setLevel((Level) Level.DEBUG);					
			log.addAppender(appender);
		}
		catch (IOException e){
			e.printStackTrace();
			log.error("Exception - "+e);
		}
	}
	log.info("in");
	TestSuite testSuite = testRunner.getTestCase().getTestSuite();
	testSuite.setPropertyValue("resultFileName", "");
	testSuite.setPropertyValue("responseDataSheetNames", "");
	testSuite.setPropertyValue("soapUIResponse","");
	//String wsdlName = project.getPropertyValue("wsdlName");
	String uploadFileLocation=project.getPropertyValue("uploadFileLocation");
		uploadFileLocation = uploadFileLocation.replace("\\","/");
	String dataSheetName = project.getPropertyValue("dataSheetName");
	//String opName=  project.getPropertyValue("operationName");
	String env= project.getPropertyValue("env");
		//testSuite.setPropertyValue("operationName",opName); 
	/*String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");*/
	String[]responseType = project.getPropertyValue("responseType").split(",");
	if(responseType.length>1){
		responseType[0]= "".equals(responseType[0].trim())? "Response1":responseType[0].trim();
		responseType[1]= "".equals(responseType[1].trim())? "Response2":responseType[1].trim();
		if(responseType[0].equals(responseType[1])){
			responseType[0]=responseType[0]+"1";
			responseType[1]=responseType[1]+"2";
		}
	}else{
		String r = responseType.length>0? responseType[0].trim():"";
		responseType = new String[2];
		responseType[0]= ("".equals(r) || "Response2".equals(r))? "Response1":r;
		responseType[1]= "Response2";
	}
	
	String wsdlName= dataSheetName.substring(0, dataSheetName.lastIndexOf("."))+".wsdl";
	
	//String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
	//String outputFileName = utils.copyFileToNewFile(outputFilePath, uploadFileLocation+dataSheetName);
	//testSuite.setPropertyValue("resultFileName",outputFileName);
	
	//outputFilePath=outputFilePath+outputFileName;
	
	//outputFilePath=uploadFileLocation+dataSheetName;
	//project.setPropertyValue("outputFilePath",outputFilePath);
	
	File fp = new File(uploadFileLocation+dataSheetName);
	//File fp = new File(outputFilePath);
	//log.info(fp)	
	Workbook wb = Workbook.getWorkbook(fp);
	Sheet Endpoint = wb.getSheet("Endpoint");
	int countRows = Endpoint.getRows();
	//int countColumns = Endpoint.getColumns();
	//String[]  readEndpoints = new String[countRows];
	
	for (int readRow=1 ;readRow < countRows;readRow++){
		if("run".equalsIgnoreCase(Endpoint.getCell(0, readRow).getContents().trim())){
			String wsdlURL= Endpoint.getCell(1, readRow).getContents().trim();
			String operationName = Endpoint.getCell(2,readRow).getContents().trim();
			String requestDataSheetName = Endpoint.getCell(3,readRow).getContents().trim();
			String inputDataSheetName = Endpoint.getCell(4,readRow).getContents().trim();
			String responseDataSheetName = Endpoint.getCell(5,readRow).getContents().trim();
			String endpoint1 = Endpoint.getCell(6,readRow).getContents().trim();
			String endpoint2 = Endpoint.getCell(7,readRow).getContents().trim();
			log.info("********** operationName: "+operationName+" **********");

			if(wsdlURL.indexOf("/")>=0){
				log.info("creating WsdlInterface......."+wsdlURL);
				ifaces= WsdlInterfaceFactory.importWsdl(project, wsdlURL, true );
			}else{
				log.info("creating WsdlInterface.......");
				ifaces= WsdlInterfaceFactory.importWsdl(project, uploadFileLocation+wsdlName, true );
			}
			
			for(WsdlInterface iface : ifaces){
				if(iface.getOperationByName(operationName)!=null){
					operation = (WsdlOperation) iface.getOperationByName(operationName);
				}
			}
			
			if(project.getPropertyValue("endpoint1") != null && (!"".equals(project.getPropertyValue("endpoint1").trim())) ){
				endpoint1=project.getPropertyValue("endpoint1");
			}
			if(project.getPropertyValue("endpoint2") != null && (!"".equals(project.getPropertyValue("endpoint2").trim())) ){
				endpoint2=project.getPropertyValue("endpoint2");
			}
			
			WsdlRequest soapRequest1 = operation.addNewRequest("Request1");
			String requestXML = operation.createRequest(true);
			soapRequest1.setRequestContent(requestXML) ;
			if(responseType[0].equals(env)){
				soapRequest1.setEndpoint(endpoint1);
			}else{
				soapRequest1.setEndpoint(endpoint2);
			}
			//XmlHolder requestHolder = new XmlHolder(requestXML);
			
			Sheet requestDataSheet = wb.getSheet(requestDataSheetName);
			int reqCountRows = requestDataSheet.getRows();
			int reqCountColumns = requestDataSheet.getColumns();
			HashMap<String,String> paramMap = new HashMap<String,String>();
			for(int reqReadColumns=0 ;reqReadColumns < reqCountColumns;reqReadColumns++){
				String reqXPath= ""+requestDataSheet.getCell(reqReadColumns,0).getContents().trim();
				if("SK_".equals(reqXPath.substring(0,3))){
					log.info("Skip the param Key::"+reqXPath);
				}else{
					paramMap.put(reqXPath, ""+reqReadColumns);
					log.info("paramMap Key::"+reqXPath);
				}
			}
			Sheet inputDataSheet = null;
			HashMap<String,String> inputMap = null;
			if(inputDataSheetName!=null && !"".equals(inputDataSheetName.trim())){
				log.info("----------------Start getting inputMap----------------");
				inputDataSheet = wb.getSheet(inputDataSheetName);
				inputMap = new HashMap<String,String>();
				int xpatRow=0;
				String previousKey=null;
				for(int i=0 ;i < inputDataSheet.getRows();i++){
					String key= ""+inputDataSheet.getCell(0,i).getContents().trim();
					if("xpath_row".equals(key)){
						xpatRow=i;
					}else if(key.equals(previousKey)){
						
					}else if(!"".equals(key)){
						inputMap.put(key, ""+i+","+xpatRow);
						log.info("put this Key::"+key+"      previousKey::"+previousKey+"   rows:"+i+","+xpatRow);
						previousKey=key;
					}
				}
			}
			
			utils.setOutputData(responseDataSheetName,"TEST CASE#",0,0);
			utils.setOutputData(responseDataSheetName,"SUCCESS FLAG",0,1);
			/*utils.setOutputData(responseDataSheetName,"errorCode",0,2);
			utils.setOutputData(responseDataSheetName,"errorMessage",0,3);
			utils.setOutputData(responseDataSheetName,"faultcode",0,4);
			utils.setOutputData(responseDataSheetName,"faultstring",0,5);
			utils.setOutputData(responseDataSheetName,"Response",0,6);*/
			Sheet responseDataSheet = wb.getSheet(responseDataSheetName);
			//int reqCountRows = responseDataSheet.getRows();
			int responseCountColumns = responseDataSheet.getColumns();
			for(int i=0;i<responseCountColumns;i++){
				utils.setOutputData(responseDataSheetName,responseDataSheet.getCell(i,0).getContents().trim(),0,2+i);
			}
			utils.setOutputData(responseDataSheetName,"FAULT STRING",0,2+responseCountColumns);
			utils.setOutputData(responseDataSheetName,"RESPONSE",0,2+responseCountColumns+1);
			//utils.setOutputData(responseDataSheetName,"RESULT",0,2+responseCountColumns+2);

			log.info("----------------Start execution of test case----------------");
			int reqReadRow=1;
			int totalTestCases=0;
			int successCount=0;
			int failureCount=0;
			int soapFaultCount=0;
			String exception="0";
			int writingRow=1;
			for(reqReadRow=1;reqReadRow < reqCountRows;reqReadRow++){
				String successFlag="true";
				//String errorCode="0";
				//String errorMessage="";
				//String faultcode="";
				String faultstring="";
				String responseContentAsXml="";
				try{
					requestXML = operation.createRequest(true);
					requestXML=requestXML.replaceAll(">[?]<", "><");
					XmlHolder requestHolder = new XmlHolder(requestXML);
					for(Iterator it=paramMap.keySet().iterator();it.hasNext();){
						String xpath=(String) it.next();
						String value = requestDataSheet.getCell(Integer.parseInt(paramMap.get(xpath)),reqReadRow).getContents();
						if(xpath.endsWith("/") && value.startsWith("Input_Key_LST_")){
							setInputList(inputMap, value.substring("Input_Key_LST_".length()), xpath, inputDataSheet, requestHolder);
						}else if(value.startsWith("Input_Key_RM_")){
							log.info("xpath::"+xpath+"::value::"+value);
							if(xpath.endsWith("/")){
								requestHolder.removeDomNodes("//"+xpath.substring(0, (xpath.length()-1) ));
							}else{
								requestHolder.removeDomNodes("//"+xpath);
							}
						}else{
							log.info("xpath::"+xpath+"::value::"+value);
							requestHolder.setNodeValue("//"+xpath, value);
						}
					}
					soapRequest1.setRequestContent(requestHolder.getXml());
					log.info("before request::"+requestHolder.getXml());
					WsdlSubmit response = (WsdlSubmit) soapRequest1.submit( new WsdlSubmitContext(soapRequest1), false );
					//WsdlSubmit<RestRequest> response=soapRequest1.submit(testRunner.getRunContext(), false);
					log.info("ContentAsXml::"+response.getResponse().getContentAsXml());
					responseContentAsXml=response.getResponse().getContentAsXml();

					if(responseContentAsXml.indexOf("errorCode")== -1 && responseContentAsXml.indexOf(":Fault")!= -1){
						soapFaultCount++;
						successFlag="false";
						//faultcode="4999";
						if(responseContentAsXml.indexOf("<soap:Text")!= -1 || responseContentAsXml.indexOf("faultcode")!= -1){
							if(responseContentAsXml.indexOf("<soap:Text")!= -1 ){
								faultstring="SOAP FAULT:"+responseContentAsXml.substring(responseContentAsXml.indexOf("<soap:Text"),responseContentAsXml.indexOf("</soap:Text>"));
							}else if(responseContentAsXml.indexOf("<soap:Fault")!= -1 ){
								faultstring="SOAP FAULT:"+responseContentAsXml.substring(responseContentAsXml.indexOf("soap:Fault"),responseContentAsXml.indexOf("</soap:Fault>"));	
							}else if(responseContentAsXml.indexOf("<soapenv:Fault")!= -1 ){
								faultstring="SOAP ENV FAULT:"+responseContentAsXml.substring(responseContentAsXml.indexOf("soapenv:Fault"),responseContentAsXml.indexOf("</soapenv:Fault>"));
							}else if(responseContentAsXml.indexOf("<faultstring")!= -1 ){
								faultstring="SOAP FAULT:"+responseContentAsXml.substring(responseContentAsXml.indexOf("faultstring"),responseContentAsXml.indexOf("</faultstring>"));
							}else{
								faultstring="SOAP FAULT:"+responseContentAsXml;
							}
						}else{
							faultstring="SOAP FAULT:"+responseContentAsXml;
						}
					}else{
						successCount++;
						setResponseDataToSheet(context, wb.getSheet(responseDataSheetName), responseContentAsXml, responseDataSheetName, writingRow, utils);
					}
					
					//utils.setOutputData(responseDataSheetName,response.getStatus(),reqReadRow,1);
					//utils.setOutputData(responseDataSheetName,response.getError(),reqReadRow,3);
				}catch(Exception e){
					//failureCount++;
					successFlag="false";
					//errorCode="4999";
					//errorMessage=""+e.getMessage();
					log.info("Exception in exicute::TestCase:"+reqReadRow+"~~~"+e.getMessage());
					exception=exception+"~~~~~~~~~~TestCase:"+reqReadRow+"~~~"+e.getMessage();
				}
				utils.setOutputData(responseDataSheetName,""+reqReadRow,writingRow,0);
				utils.setOutputData(responseDataSheetName,successFlag,writingRow,1,true,"true".equals(successFlag)? "GREEN":"RED");
				//utils.setOutputData(responseDataSheetName,errorCode,writingRow,2);
				//utils.setOutputData(responseDataSheetName,errorMessage,writingRow,3);
				//utils.setOutputData(responseDataSheetName,faultcode,writingRow,4);
				utils.setOutputData(responseDataSheetName,faultstring,writingRow,2+responseCountColumns);
				utils.setOutputData(responseDataSheetName,responseContentAsXml,writingRow,2+responseCountColumns+1);
				writingRow=writingRow+2;
			}
			totalTestCases=reqReadRow-1;

			writingRow++;
			utils.setOutputData(responseDataSheetName,"------- Summary --------",writingRow,1);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"TotalTestCases",writingRow,1);
			utils.setOutputData(responseDataSheetName,""+totalTestCases,writingRow,2);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SuccessCount",writingRow,1,true,"GREEN");
			utils.setOutputData(responseDataSheetName,""+successCount,writingRow,2,true,"GREEN");
			/*writingRow++;
			utils.setOutputData(responseDataSheetName,"FailureCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+failureCount,writingRow,2,true,"RED");*/
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SoapFaultCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+soapFaultCount,writingRow,2,true,"RED");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"Exception",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,exception,writingRow,2,true,"RED");
			
			String soapUIResponse=context.expand( '${#TestSuite#soapUIResponse}');
			soapUIResponse = soapUIResponse+operationName+","+totalTestCases+","+successCount+","+failureCount+","+soapFaultCount+","+exception+"::";
			testSuite.setPropertyValue("soapUIResponse", soapUIResponse);
			
			//========remove the interface===========
			for(WsdlInterface iface : ifaces){
				project.removeInterface( iface );
			}
			//project.removeInterface( restService );
			String responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}');
			testSuite.setPropertyValue("responseDataSheetNames", responseDataSheetNames+responseDataSheetName+",");
			/*log.info("Writing in File .....................");
			utils.writeInFile(outputFilePath, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);*/
		}
	}

}catch(Exception e){
	/*if(utils!=null){
		utils.dataCleanUp();
	}*/
	for(WsdlInterface iface : ifaces){
			project.removeInterface( iface );
	}
	log.info("Exception::"+e.getMessage());
}

log.info("Completed the Test Case execution");


public String setResponseDataToSheet(PropertyExpansionContext context, Sheet responseDataSheet, String response1, String sheetName,int startingRow, def utils) throws Exception {
	GroovyUtils groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
	XmlHolder response1Holder = groovyUtils.getXmlHolder(response1);
	int writeColumns=2;
	int reqReadColumns=0;
	String result="PASS";
	
	for(reqReadColumns=0;reqReadColumns<responseDataSheet.getColumns();reqReadColumns++){
		//boolean ignore=false;
		String xpath=""+responseDataSheet.getCell(reqReadColumns,0).getContents().trim();
		if( "IG_".equals(xpath.substring(0,3)) ){
			xpath="//"+xpath.substring(3);
			//ignore=true;
		}else{
			xpath="//"+xpath;
		}
		
		String[] value1=response1Holder.getNodeValues(xpath);
		String val1="";
		if(value1.length>1){
			for(int i=0;i<value1.length;i++){
				val1=val1+value1[i]+"###";
			}
		}else{
			val1=response1Holder.getNodeValue(xpath);
		}
		utils.setOutputData(sheetName, val1, startingRow,writeColumns);

		writeColumns++;
	}

	return result;
}

public String setInputList(HashMap<String,String> inputMap, String inputListKey, String parentXPath, Sheet inputDataSheet, XmlHolder requestHolder){
	log.info("-----------------setInputList for inputListKey::"+inputListKey+"---parentXPath::"+parentXPath+"-----------------");
	parentXPath = parentXPath.substring(0, (parentXPath.length()-1) );
	String[] rows = inputMap.get(inputListKey).split(",");
	
	def node;
	def parentNode;
	try {
		node = requestHolder.getDomNode("//"+parentXPath+"[1]");
		parentNode = node.getParentNode();
		requestHolder.removeDomNodes("//"+parentXPath);
		int inputRow=Integer.parseInt(rows[0]);
		int xpathRow=Integer.parseInt(rows[1]);
		for(int i=0; (inputRow+i)<inputDataSheet.getRows() && inputListKey.equals( inputDataSheet.getCell(0, inputRow+i).getContents() );i++){
			parentNode.appendChild(node.cloneNode(true));
			
			for(int j=1; !"end_xpath".equals( inputDataSheet.getCell(j, xpathRow).getContents() ) && j<inputDataSheet.getColumns();j++){
				String xpath=inputDataSheet.getCell(j, xpathRow).getContents();
				String value = inputDataSheet.getCell(j, inputRow+i).getContents();
				log.info("xpath::"+parentXPath+"["+(i+1)+"]/"+xpath+"::value::"+value);
				if(xpath.endsWith("/") && value.startsWith("Input_Key_LST_")){
					setInputList(inputMap, value.substring("Input_Key_LST_".length()), parentXPath+"["+(i+1)+"]/"+xpath, inputDataSheet, requestHolder);
				}else if(value.startsWith("Input_Key_RM_")){
					if(xpath.endsWith("/")){
						requestHolder.removeDomNodes("//"+parentXPath+"["+(i+1)+"]/"+xpath.substring(0, (xpath.length()-1) ));
					}else{
						requestHolder.removeDomNodes("//"+parentXPath+"["+(i+1)+"]/"+xpath);
					}
				}else if(!xpath.startsWith("SK_")){
					requestHolder.setNodeValue("//"+parentXPath+"["+(i+1)+"]/"+xpath, value);
				}
			}
			
		}
		
	} catch (Exception e) {
		log.info("XmlException in setInputList::"+e.getStackTrace());
		//e.printStackTrace();
	}
	
	return "";
}


]]></script></con:config></con:testStep><con:properties><con:property><con:name>inputColumnSheet</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputColumnSheet</con:name><con:value>GetWOServiceDetailsRes</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>soapUIResponse</con:name><con:value>performAccountHit,2,1,0,1,0::</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>accountEquipment_Report20160427_00-26-13-737_129.xls</con:value></con:property><con:property><con:name>responseDataSheetNames</con:name><con:value>performAccountHitRes,</con:value></con:property></con:properties><con:setupScript/><con:tearDownScript><![CDATA[import com.eviware.soapui.impl.wsdl.WsdlProject;

log.info("!Start TearDown Script execution...................................");
WsdlProject project = (WsdlProject) testSuite.getProject();
//Utils utils = Utils.getInstance();
def utils = project.runAfterLoadScript();
String []responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}').split(",");
String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");
String dataSheetName=project.getPropertyValue("dataSheetName");
String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
testSuite.setPropertyValue("resultFileName",outputFileName);

//-------------------- Start Code to move the file in archive --------------------
String searchString=dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report";
String archiveFilePath = project.getPropertyValue("uploadFileLocation").replace("\\","/") + "archive/";
//List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /${searchString}/ }
File[] files = new File(outputFilePath).listFiles();
//List<File> files1 = Arrays.asList(files);
log.info("********"+files.length);
File archieveDir = new File(archiveFilePath);
// Tests whether the directory denoted by this abstract pathname exists.
if(!archieveDir.exists()){
	archieveDir.mkdir();
}
for (int i=0 ; i < files.length;i++){
	if(files[i].getName().indexOf(".xls") != -1 && files[i].getName().startsWith(searchString)){
		if(files[i].renameTo(new File(archiveFilePath + files[i].getName()))){
			log.info("File is moved successful!");
		}else{
			log.info("File is failed to move!");
		}
    }
}
//-------------------- End Code to move the file in archive --------------------

for(String responseDataSheetName : responseDataSheetNames){
	if(!"".equals(responseDataSheetName.trim())){
		//--------------------START Writing in file--------------------
		log.info("responseDataSheetName: "+responseDataSheetName);
		try{
			utils.writeInFile(outputFilePath+outputFileName, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);
		}catch(Exception e){
			log.error("Got exception in writing data of responseDataSheetName: "+responseDataSheetName);
		}
		//--------------------END Writing in file--------------------
	}
}

if(utils!=null){
	utils.dataCleanUp();
}
log.info("Finished");
]]></con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Comparative Analysis Engine SOAP" id="c5afa587-34a7-410c-9cce-1cbb46eb5794"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCaseStep" searchProperties="true" id="afd071cf-b33c-4376-a1de-4703c685393a"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="6514a4da-a79f-46e7-a564-d8190c9040c5"><con:settings/><con:config><script><![CDATA[import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;

import jxl.Sheet;
import jxl.Workbook;

import com.eviware.soapui.impl.WsdlInterfaceFactory;
import com.eviware.soapui.impl.wsdl.WsdlInterface;
import com.eviware.soapui.impl.wsdl.WsdlOperation;
import com.eviware.soapui.impl.wsdl.WsdlProject;
import com.eviware.soapui.impl.wsdl.WsdlRequest;
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.impl.wsdl.WsdlSubmitContext;
//import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext;
import com.eviware.soapui.model.testsuite.TestCase;
import com.eviware.soapui.model.testsuite.TestCaseRunner;
//import com.eviware.soapui.model.testsuite.TestCaseRunner;
import com.eviware.soapui.model.testsuite.TestSuite;
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext;
import com.eviware.soapui.support.GroovyUtils;
import com.eviware.soapui.support.XmlHolder;

import org.apache.log4j.*;



WsdlProject project = (WsdlProject) testRunner.getTestCase().getTestSuite().getProject();
//RestService restService=null;
WsdlInterface[] ifaces = null;
WsdlOperation operation = null;
def utils = project.runAfterLoadScript();
//Utils utils = Utils.getInstance();
TestCase testCase = testRunner.getTestCase();
try{
	if(System.getProperty("catalina.base")!=null){
		String logFileName=System.getProperty("catalina.base")+"/logs/soapuiAPI.log";
		String logPattern=  "%d{yyyy-MM-dd HH:mm:ss.SSS} %C %m %n";
		String logFileRollup=  ".yyyy-MM-dd";
		//String logLevel=  context.expand( '${#Project#LOG_LEVEL}' )
		Layout layout = new PatternLayout(logPattern);
		DailyRollingFileAppender appender;
		try{
			appender = new DailyRollingFileAppender(layout, logFileName,logFileRollup);
			log = Logger.getRootLogger();
			log.setLevel((Level) Level.DEBUG);					
			log.addAppender(appender);
		}
		catch (IOException e){
			e.printStackTrace();
			log.error("Exception - "+e);
		}
	}
	log.info("in");
	TestSuite testSuite = testRunner.getTestCase().getTestSuite();
	testSuite.setPropertyValue("resultFileName", "");
	testSuite.setPropertyValue("responseDataSheetNames", "");
	testSuite.setPropertyValue("soapUIResponse","");
	//String wsdlName = project.getPropertyValue("wsdlName");
	String uploadFileLocation=project.getPropertyValue("uploadFileLocation");
		uploadFileLocation = uploadFileLocation.replace("\\","/");
	String dataSheetName = project.getPropertyValue("dataSheetName");
	//String opName=  project.getPropertyValue("operationName");
	String env= project.getPropertyValue("env");
		//testSuite.setPropertyValue("operationName",opName); 
	/*String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");*/
	String[]responseType = project.getPropertyValue("responseType").split(",");
	if(responseType.length>1){
		responseType[0]= "".equals(responseType[0].trim())? "Response1":responseType[0].trim();
		responseType[1]= "".equals(responseType[1].trim())? "Response2":responseType[1].trim();
		if(responseType[0].equals(responseType[1])){
			responseType[0]=responseType[0]+"1";
			responseType[1]=responseType[1]+"2";
		}
	}else{
		String r = responseType.length>0? responseType[0].trim():"";
		responseType = new String[2];
		responseType[0]= ("".equals(r) || "Response2".equals(r))? "Response1":r;
		responseType[1]= "Response2";
	}
	
	String wsdlName= dataSheetName.substring(0, dataSheetName.lastIndexOf("."))+".wsdl";

	//String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
	//String outputFileName = utils.copyFileToNewFile(outputFilePath, uploadFileLocation+dataSheetName);
	//testSuite.setPropertyValue("resultFileName",outputFileName);
	
	//outputFilePath=outputFilePath+outputFileName;
	
	//outputFilePath=uploadFileLocation+dataSheetName;
	//project.setPropertyValue("outputFilePath",outputFilePath);

	File fp = new File(uploadFileLocation+dataSheetName);
	//File fp = new File(outputFilePath);
	//log.info(fp)	
	Workbook wb = Workbook.getWorkbook(fp);
	Sheet Endpoint = wb.getSheet("Endpoint");
	int countRows = Endpoint.getRows();
	int countColumns = Endpoint.getColumns();
	//String[]  readEndpoints = new String[countRows];
	
	/*String[]responseType=new String[2];
	responseType[0] = Endpoint.getCell(8,0).getContents().trim();
	responseType[1] = Endpoint.getCell(9,0).getContents().trim();
	if("".equals(responseType[0]) || "".equals((responseType[0].substring(0, responseType[0].toLowerCase().indexOf("endpoint"))).trim() ) ){
		responseType[0]="Response1";
	}else{
		responseType[0]=(responseType[0].substring(0, responseType[0].toLowerCase().indexOf("endpoint"))).trim();
	}
	if("".equals(responseType[1]) || "".equals((responseType[1].substring(1, responseType[1].toLowerCase().indexOf("endpoint"))).trim() ) ){
		responseType[1]="Response1";
	}else{
		responseType[1]=(responseType[1].substring(0, responseType[1].toLowerCase().indexOf("endpoint"))).trim();
	}
	if(responseType[0].equalsIgnoreCase(responseType[1])){
		responseType[0]=responseType[0]+"1";
		responseType[1]=responseType[1]+"2";
	}*/
	log.info("start");
	for (int readRow=1 ;readRow < countRows;readRow++){
		if("run".equalsIgnoreCase(Endpoint.getCell(0, readRow).getContents().trim())){
			String wsdlURL= Endpoint.getCell(1, readRow).getContents().trim();
			String operationName = Endpoint.getCell(2,readRow).getContents().trim();
			String requestDataSheetName = Endpoint.getCell(3,readRow).getContents().trim();
			String inputDataSheetName = Endpoint.getCell(4,readRow).getContents().trim();
			String responseDataSheetName = Endpoint.getCell(5,readRow).getContents().trim();
			String endpoint1 = Endpoint.getCell(6,readRow).getContents().trim();
			String endpoint2 = Endpoint.getCell(7,readRow).getContents().trim();
			log.info("********** operationName: "+operationName+" **********");
			
			if(wsdlURL.indexOf("/")>=0){
				log.info("creating WsdlInterface......."+wsdlURL);
				ifaces= WsdlInterfaceFactory.importWsdl(project, wsdlURL, true );
			}else{
				log.info("creating WsdlInterface.......");
				ifaces= WsdlInterfaceFactory.importWsdl(project, uploadFileLocation+wsdlName, true );
			}
			
			for(WsdlInterface iface : ifaces){
				if(iface.getOperationByName(operationName)!=null){
					operation = (WsdlOperation) iface.getOperationByName(operationName);
				}
			}
			
			if(project.getPropertyValue("endpoint1") != null && (!"".equals(project.getPropertyValue("endpoint1").trim())) ){
				endpoint1=project.getPropertyValue("endpoint1");
			}
			if(project.getPropertyValue("endpoint2") != null && (!"".equals(project.getPropertyValue("endpoint2").trim())) ){
				endpoint2=project.getPropertyValue("endpoint2");
			}
			
			WsdlRequest soapRequest1 = operation.addNewRequest("Request1"); 
			String request1XML = operation.createRequest(true);
			soapRequest1.setRequestContent(request1XML) ;
			soapRequest1.setEndpoint(endpoint1);
			
			WsdlRequest soapRequest2 = operation.addNewRequest("Request2"); 
			String request2XML = operation.createRequest(true);
			soapRequest2.setRequestContent(request2XML) ;
			soapRequest2.setEndpoint(endpoint2);
			
			Sheet requestDataSheet = wb.getSheet(requestDataSheetName);
			int reqCountRows = requestDataSheet.getRows();
			int reqCountColumns = requestDataSheet.getColumns();
			HashMap<String,String> paramMap = new HashMap<String,String>();
			for(int reqReadColumns=0 ;reqReadColumns < reqCountColumns;reqReadColumns++){
				String reqXPath= ""+requestDataSheet.getCell(reqReadColumns,0).getContents().trim();
				if("SK_".equals(reqXPath.substring(0,3))){
					log.info("Skip the param Key::"+reqXPath);
				}else{
					paramMap.put(reqXPath, ""+reqReadColumns);
					log.info("paramMap Key::"+reqXPath);
				}
			}
			Sheet inputDataSheet = null;
			HashMap<String,String> inputMap = null;
			if(inputDataSheetName!=null && !"".equals(inputDataSheetName.trim())){
				log.info("----------------Start getting inputMap----------------");
				inputDataSheet = wb.getSheet(inputDataSheetName);
				inputMap = new HashMap<String,String>();
				int xpatRow=0;
				String previousKey=null;
				for(int i=0 ;i < inputDataSheet.getRows();i++){
					String key= ""+inputDataSheet.getCell(0,i).getContents().trim();
					if("xpath_row".equals(key)){
						xpatRow=i;
					}else if(key.equals(previousKey)){
						
					}else if(!"".equals(key)){
						inputMap.put(key, ""+i+","+xpatRow);
						log.info("put this Key::"+key+"      previousKey::"+previousKey+"   rows:"+i+","+xpatRow);
						previousKey=key;
					}
				}
			}
			
			
			//XmlHolder request1Holder = new XmlHolder(request1XML);
			//XmlHolder request2Holder = new XmlHolder(request2XML);
			
			utils.setOutputData(responseDataSheetName,"TEST CASE#",0,0);
			utils.setOutputData(responseDataSheetName,"RESPONSE TYPE",0,1);
			Sheet responseDataSheet = wb.getSheet(responseDataSheetName);
			//int reqCountRows = responseDataSheet.getRows();
			int responseCountColumns = responseDataSheet.getColumns();
			for(int i=0;i<responseCountColumns;i++){
				utils.setOutputData(responseDataSheetName,responseDataSheet.getCell(i,0).getContents().trim(),0,2+i);
			}
			utils.setOutputData(responseDataSheetName,"FAULT STRING",0,2+responseCountColumns);
			utils.setOutputData(responseDataSheetName,"RESPONSE",0,2+responseCountColumns+1);
			utils.setOutputData(responseDataSheetName,"RESULT",0,2+responseCountColumns+2);

			log.info("----------------Start execution of test case----------------");
			int reqReadRow=1;
			int totalTestCases=0;
			int successCount=0;
			int faultCount=0;
			int failureCount=0;
			String exception="0";
			int writingRow=1;
			for(reqReadRow=1;reqReadRow < reqCountRows;reqReadRow++){
				//String successFlag="true";
				//String errorCode="0";
				//String errorMessage="";
				//String faultcode="";
				String faultstring1="";
				String faultstring2="";
				String response1ContentAsXml="";
				String response2ContentAsXml="";
				String result="PASS";
				utils.setOutputData(responseDataSheetName, ""+reqReadRow, writingRow,0);
				utils.setOutputData(responseDataSheetName, responseType[0]+" RESPONSE", writingRow,1);
				utils.setOutputData(responseDataSheetName, responseType[1]+" RESPONSE", writingRow+1,1);
				try{
					request1XML = operation.createRequest(true);
					request1XML=request1XML.replaceAll(">[?]<", "><");
					request2XML = operation.createRequest(true);
					request2XML=request2XML.replaceAll(">[?]<", "><");
					XmlHolder request1Holder = new XmlHolder(request1XML);
					XmlHolder request2Holder = new XmlHolder(request2XML);
					for(Iterator it=paramMap.keySet().iterator();it.hasNext();){
						String xpath=(String) it.next();
						String value = requestDataSheet.getCell(Integer.parseInt(paramMap.get(xpath)),reqReadRow).getContents();
						if(xpath.endsWith("/") && value.startsWith("Input_Key_LST_")){
							setInputList(inputMap, value.substring("Input_Key_LST_".length()), xpath, inputDataSheet, request1Holder, request2Holder);
						}else if(value.startsWith("Input_Key_RM_")){
							log.info("xpath::"+xpath+"::value::"+value);
							if(xpath.endsWith("/")){
								request1Holder.removeDomNodes("//"+xpath.substring(0, (xpath.length()-1) ));
								request2Holder.removeDomNodes("//"+xpath.substring(0, (xpath.length()-1) ));
							}else{
								request1Holder.removeDomNodes("//"+xpath);
								request2Holder.removeDomNodes("//"+xpath);
							}
						}else{
							log.info("xpath::"+xpath+"::value::"+value);
							request1Holder.setNodeValue("//"+xpath, value);
							request2Holder.setNodeValue("//"+xpath, value);
						}/*if(value!=null && !"".equals(value)){
							request1Holder.setNodeValue("//"+xpath, value);
							request2Holder.setNodeValue("//"+xpath, value);
						}*/
					}
					
					log.info("before request"+request1Holder.getXml());
					soapRequest1.setRequestContent(request1Holder.getXml());
					WsdlSubmit response1 = (WsdlSubmit) soapRequest1.submit( new WsdlSubmitContext(soapRequest1), false );
					response1ContentAsXml=response1.getResponse().getContentAsXml();
					//log.info("ContentAsXml::"+response1.getResponse().getContentAsXml());
					//log.info("ContentAsString()::"+response1.getResponse().getContentAsString());

					soapRequest2.setRequestContent(request2Holder.getXml());
					WsdlSubmit response2 = (WsdlSubmit) soapRequest2.submit( new WsdlSubmitContext(soapRequest2), false );
					response2ContentAsXml=response2.getResponse().getContentAsXml();
					//log.info("ContentAsXml::"+response2.getResponse().getContentAsXml());
					//log.info("ContentAsString()::"+response2.getResponse().getContentAsString());

					utils.setOutputData(responseDataSheetName, response1ContentAsXml, writingRow, 2+responseCountColumns+1);
					utils.setOutputData(responseDataSheetName, response2ContentAsXml, writingRow+1, 2+responseCountColumns+1);
					
					if(response1ContentAsXml.indexOf(":Fault")!= -1 || response2ContentAsXml.indexOf(":Fault")!= -1){
						//result="FAIL";
						//faultCount++;
						//successFlag="false";
						//faultcode="4999";
						//faultstring = response1ContentAsXml.substring(response1ContentAsXml.indexOf("<errors"),response1ContentAsXml.indexOf("</errors>"));
						if(response1ContentAsXml.indexOf("<soap:Text")!= -1 || response1ContentAsXml.indexOf("faultcode")!= -1){
							if(response1ContentAsXml.indexOf("<soap:Text")!= -1 ){
								faultstring1="SOAP FAULT:"+response1ContentAsXml.substring(response1ContentAsXml.indexOf("<soap:Text"),response1ContentAsXml.indexOf("</soap:Text>"));
							}else if(response1ContentAsXml.indexOf("<soap:Fault")!= -1 ){
								faultstring1="SOAP FAULT:"+response1ContentAsXml.substring(response1ContentAsXml.indexOf("soap:Fault"),response1ContentAsXml.indexOf("</soap:Fault>"));	
							}else if(response1ContentAsXml.indexOf("<soapenv:Fault")!= -1 ){
								faultstring1="SOAP ENV FAULT:"+response1ContentAsXml.substring(response1ContentAsXml.indexOf("soapenv:Fault"),response1ContentAsXml.indexOf("</soapenv:Fault>"));	
							}else if(response1ContentAsXml.indexOf("<faultstring")!= -1 ){
								faultstring1="SOAP FAULT:"+response1ContentAsXml.substring(response1ContentAsXml.indexOf("faultstring"),response1ContentAsXml.indexOf("</faultstring>"));
							}else{
								faultstring1="SOAP FAULT:"+response1ContentAsXml;
							}
						}else{
							faultstring1="SOAP FAULT1:"+response1ContentAsXml;
						}
						
						if(response2ContentAsXml.indexOf("<soap:Text")!= -1 || response2ContentAsXml.indexOf("faultcode")!= -1){
							if(response2ContentAsXml.indexOf("<soap:Text")!= -1 ){
								faultstring2="SOAP FAULT:"+response2ContentAsXml.substring(response2ContentAsXml.indexOf("<soap:Text"),response2ContentAsXml.indexOf("</soap:Text>"));
							}else if(response2ContentAsXml.indexOf("<soap:Fault")!= -1 ){
								faultstring2="SOAP FAULT:"+response2ContentAsXml.substring(response2ContentAsXml.indexOf("soap:Fault"),response2ContentAsXml.indexOf("</soap:Fault>"));	
							}else if(response2ContentAsXml.indexOf("<soapenv:Fault")!= -1 ){
								faultstring2="SOAP ENV FAULT:"+response2ContentAsXml.substring(response2ContentAsXml.indexOf("soapenv:Fault"),response2ContentAsXml.indexOf("</soapenv:Fault>"));	
							}else if(response2ContentAsXml.indexOf("<faultstring")!= -1 ){
								faultstring2="SOAP FAULT:"+response2ContentAsXml.substring(response2ContentAsXml.indexOf("faultstring"),response2ContentAsXml.indexOf("</faultstring>"));
							}else{
								faultstring2="SOAP FAULT:"+response2ContentAsXml;
							}
						}else{
							faultstring2="SOAP FAULT1:"+response2ContentAsXml;
						}
						
						if(faultstring1!=null && faultstring1.equals(faultstring2)){
							result="PASS";
							successCount++;
						}else{
							result="FAULT";
							faultCount++;
						}
						
						utils.setOutputData(responseDataSheetName, faultstring1, writingRow, 2+responseCountColumns);
						utils.setOutputData(responseDataSheetName, faultstring2, writingRow+1, 2+responseCountColumns);
						
					}else if(response1ContentAsXml.indexOf("<SOAP-ENV:Body")!= -1 && response2ContentAsXml.indexOf("<SOAP-ENV:Body")!= -1){
						//successCount++;
						//response1ContentAsXml=response1ContentAsXml.substring(response1ContentAsXml.indexOf(">", response1ContentAsXml.indexOf("<Response"))+1, response1ContentAsXml.indexOf("</Response"));
						result = compareResponse(context, wb.getSheet(responseDataSheetName), response1ContentAsXml, response2ContentAsXml, responseDataSheetName, writingRow, utils);
						if("PASS".equals(result)){
							successCount++;
						}else{
							failureCount++;
						}
						
					}else{
						result="FAIL";
						failureCount++;
						log.info("null/unexpected response");
					}
					
				}catch(Exception e){
					result="FAIL";
					//failureCount++;
					//successFlag="false";
					//errorCode="4999";
					//errorMessage=""+e.getMessage();
					log.info("Exception in exicute::TestCase:"+reqReadRow+"~~~"+e.getMessage());
					exception=exception+"~~~~~~~~~~TestCase:"+reqReadRow+"~~~"+e.getMessage();
				}

				utils.setOutputData(responseDataSheetName, result, writingRow,2+responseCountColumns+2, true, "PASS".equals(result)? "GREEN":"RED");
				writingRow=writingRow+3;
				
			}
			totalTestCases=reqReadRow-1;
			
			writingRow++;
			utils.setOutputData(responseDataSheetName,"------- Summary --------",writingRow,1);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"TotalTestCases",writingRow,1);
			utils.setOutputData(responseDataSheetName,""+totalTestCases,writingRow,2);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SuccessCount",writingRow,1,true,"GREEN");
			utils.setOutputData(responseDataSheetName,""+successCount,writingRow,2,true,"GREEN");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"FailureCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+failureCount,writingRow,2,true,"RED");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SoapFaultCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+faultCount,writingRow,2,true,"RED");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"Exception",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,exception,writingRow,2,true,"RED");
			
			String soapUIResponse=context.expand( '${#TestSuite#soapUIResponse}');
			soapUIResponse = soapUIResponse+operationName+","+totalTestCases+","+successCount+","+failureCount+","+faultCount+","+exception+"::";
			testSuite.setPropertyValue("soapUIResponse", soapUIResponse);
			
			//========remove the interface===========
			for(WsdlInterface iface : ifaces){
				project.removeInterface( iface );
			}
			String responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}');
			testSuite.setPropertyValue("responseDataSheetNames", responseDataSheetNames+responseDataSheetName+",");
			/*utils.writeInFile(outputFilePath, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);*/
		}
	}

}catch(Exception e){
	/*if(utils!=null){
		utils.dataCleanUp();
	}*/
	for(WsdlInterface iface : ifaces){
		project.removeInterface( iface );
	}
	log.info("Exception::"+e.getMessage());
}

log.info("Completed the Test Case execution");




public String compareResponse(PropertyExpansionContext context, Sheet responseDataSheet, String response1, String response2, String sheetName,int startingRow, def utils) throws Exception {
	GroovyUtils groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
	XmlHolder response1Holder = groovyUtils.getXmlHolder(response1);
	XmlHolder response2Holder = groovyUtils.getXmlHolder(response2);
	//log.info("response1Holder::"+response1Holder.getXml());
	//Utils utils=new Utils();
	//int rowIncrement=3;
	int writeColumns=2;
	int reqReadColumns=0;
	String result="PASS";
	
	//utils.setOutputData(sheetName, "TestCase#"+startingRow, startingRow,0);
	//utils.setOutputData(sheetName, "Response1", startingRow,1);
	//utils.setOutputData(sheetName, "Response2", startingRow+1,1);
	
	for(reqReadColumns=0;reqReadColumns<responseDataSheet.getColumns();reqReadColumns++){
		boolean ignore=false;
		String xpath=""+responseDataSheet.getCell(reqReadColumns,0).getContents().trim();
		if( "IG_".equals(xpath.substring(0,3)) ){
			xpath="//"+xpath.substring(3);
			ignore=true;
		}else{
			xpath="//"+xpath;
		}
		
		String[] value1=response1Holder.getNodeValues(xpath);
		//log.info("length:"+value1);
		String[] value2=response2Holder.getNodeValues(xpath);
		ArrayList<String> list1 = new ArrayList<String>();
		ArrayList<String> list2 = new ArrayList<String>();
		String val1="";
		String val2="";
		if(value1.length>1){
			list1 = new ArrayList<String>(Arrays.asList(value1));
			for(int i=0;i<value1.length;i++){
				val1=val1+value1[i]+"###";
			}
		}else{
			val1=response1Holder.getNodeValue(xpath);
		}
		
		if(value2.length>1){
			list2 = new ArrayList<String>(Arrays.asList(value2));
			for(int i=0;i<value2.length;i++){
				val2=val2+value2[i]+"###";
			}
		}else{
			val2=response2Holder.getNodeValue(xpath);
		}
		
		//log.info("value1::"+value1+"::xpath::"+xpath);
		if(ignore){
			utils.setOutputData(sheetName, val1, startingRow,writeColumns);
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
		}else if(value1.length>1 || value2.length>1){
			utils.setOutputData(sheetName, val1, startingRow,writeColumns);
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
			if(list1.containsAll(list2) && list2.containsAll(list1)){
				
			}else{
				result="FAIL";
			}
			
		}else if(val1.equals(val2) ){
			utils.setOutputData(sheetName, val1, startingRow,writeColumns);
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
		}else{
			result="FAIL";
			utils.setOutputData(sheetName, val1, startingRow,writeColumns,true,"RED");
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
		}

		writeColumns++;
	}
	
	//utils.setOutputData(sheetName, response1, startingRow,writeColumns);
	//utils.setOutputData(sheetName, response2, startingRow+1,writeColumns++);
	
	//utils.setOutputData(sheetName, result, startingRow,writeColumns++, true, "PASS".equals(result)? "GREEN":"RED");
	//utils.setOutputData(sheetName, value2, startingRow+1,reqReadColumns+startColPoint);
	return result;
}

public String setInputList(HashMap<String,String> inputMap, String inputListKey, String parentXPath, Sheet inputDataSheet, XmlHolder request1Holder, XmlHolder request2Holder){
	log.info("-----------------setInputList for inputListKey::"+inputListKey+"---parentXPath::"+parentXPath+"-----------------");
	parentXPath = parentXPath.substring(0, (parentXPath.length()-1) );
	String[] rows = inputMap.get(inputListKey).split(",");
	
	def node1;
	def parentNode1;
	def node2;
	def parentNode2;
	try {
		node1 = request1Holder.getDomNode("//"+parentXPath+"[1]");
		node2 = request2Holder.getDomNode("//"+parentXPath+"[1]");
		parentNode1 = node1.getParentNode();
		parentNode2 = node2.getParentNode();
		request1Holder.removeDomNodes("//"+parentXPath);
		request2Holder.removeDomNodes("//"+parentXPath);
		int inputRow=Integer.parseInt(rows[0]);
		int xpathRow=Integer.parseInt(rows[1]);
		for(int i=0; (inputRow+i)<inputDataSheet.getRows() && inputListKey.equals( inputDataSheet.getCell(0, inputRow+i).getContents() );i++){
			parentNode1.appendChild(node1.cloneNode(true));
			parentNode2.appendChild(node2.cloneNode(true));
			
			for(int j=1; !"end_xpath".equals( inputDataSheet.getCell(j, xpathRow).getContents() ) && j<inputDataSheet.getColumns();j++){
				String xpath=inputDataSheet.getCell(j, xpathRow).getContents();
				String value = inputDataSheet.getCell(j, inputRow+i).getContents();
				log.info("xpath::"+parentXPath+"["+(i+1)+"]/"+xpath+"::value::"+value);
				if(xpath.endsWith("/") && value.startsWith("Input_Key_LST_")){
					setInputList(inputMap, value.substring("Input_Key_LST_".length()), parentXPath+"["+(i+1)+"]/"+xpath, inputDataSheet, request1Holder, request2Holder);
				}else if(value.startsWith("Input_Key_RM_")){
					if(xpath.endsWith("/")){
						request1Holder.removeDomNodes("//"+parentXPath+"["+(i+1)+"]/"+xpath.substring(0, (xpath.length()-1) ));
						request2Holder.removeDomNodes("//"+parentXPath+"["+(i+1)+"]/"+xpath.substring(0, (xpath.length()-1) ));
					}else{
						request1Holder.removeDomNodes("//"+parentXPath+"["+(i+1)+"]/"+xpath);
						request2Holder.removeDomNodes("//"+parentXPath+"["+(i+1)+"]/"+xpath);
					}
				}else if(!xpath.startsWith("SK_")){
					request1Holder.setNodeValue("//"+parentXPath+"["+(i+1)+"]/"+xpath, value);
					request2Holder.setNodeValue("//"+parentXPath+"["+(i+1)+"]/"+xpath, value);
				}
			}
			
		}
		
	} catch (Exception e) {
		log.info("XmlException in setInputList::"+e.getStackTrace());
		//e.printStackTrace();
	}
	
	return "";
}

]]></script></con:config></con:testStep><con:properties><con:property><con:name>inputColumnSheet</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputColumnSheet</con:name><con:value>GetWOServiceDetailsRes</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>soapUIResponse</con:name><con:value>performAccountHit,2,2,0,0,0::</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value/></con:property><con:property><con:name>responseDataSheetNames</con:name><con:value>performAccountHitRes,</con:value></con:property></con:properties><con:setupScript/><con:tearDownScript><![CDATA[import com.eviware.soapui.impl.wsdl.WsdlProject;

log.info("!Start TearDown Script execution...................................");
WsdlProject project = (WsdlProject) testSuite.getProject();
//Utils utils = Utils.getInstance();
def utils = project.runAfterLoadScript();
String []responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}').split(",");
String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");
String dataSheetName=project.getPropertyValue("dataSheetName");
String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
testSuite.setPropertyValue("resultFileName",outputFileName);

//-------------------- Start Code to move the file in archive --------------------
String searchString=dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report";
String archiveFilePath = project.getPropertyValue("uploadFileLocation").replace("\\","/") + "archive/";
//List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /${searchString}/ }
File[] files = new File(outputFilePath).listFiles();
//List<File> files1 = Arrays.asList(files);
log.info("********"+files.length);
File archieveDir = new File(archiveFilePath);
// Tests whether the directory denoted by this abstract pathname exists.
if(!archieveDir.exists()){
	archieveDir.mkdir();
}
for (int i=0 ; i < files.length;i++){
	if(files[i].getName().indexOf(".xls") != -1 && files[i].getName().startsWith(searchString)){
		if(files[i].renameTo(new File(archiveFilePath + files[i].getName()))){
			log.info("File is moved successful!");
		}else{
			log.info("File is failed to move!");
		}
    }
}
//-------------------- End Code to move the file in archive --------------------

for(String responseDataSheetName : responseDataSheetNames){
	if(!"".equals(responseDataSheetName.trim())){
		//--------------------START Writing in file--------------------
		log.info("responseDataSheetName: "+responseDataSheetName);
		try{
			utils.writeInFile(outputFilePath+outputFileName, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);
		}catch(Exception e){
			log.error("Got exception in writing data of responseDataSheetName: "+responseDataSheetName);
		}
		//--------------------END Writing in file--------------------
	}
}

if(utils!=null){
	utils.dataCleanUp();
}
log.info("Finished");
]]></con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Run Engine Rest" id="ca5efb15-45c8-456c-bc04-584cbb6d8644"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase" searchProperties="true" id="052b09a4-fe4b-44b7-a583-bbca95096d39"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="17ae7c3d-257f-4beb-9de3-846b3f415528"><con:settings/><con:config><script><![CDATA[import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;

import jxl.Sheet;
import jxl.Workbook;

import com.eviware.soapui.impl.rest.RestMethod;
import com.eviware.soapui.impl.rest.RestRequest;
import com.eviware.soapui.impl.rest.RestResource;
import com.eviware.soapui.impl.rest.RestService;
import com.eviware.soapui.impl.rest.RestServiceFactory;
import com.eviware.soapui.impl.rest.support.RestParamProperty;
import com.eviware.soapui.impl.rest.support.RestParamsPropertyHolder;
import com.eviware.soapui.impl.rest.RestRequestInterface;
import com.eviware.soapui.impl.wsdl.WsdlProject;
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext;
import com.eviware.soapui.model.testsuite.TestCase;
import com.eviware.soapui.model.testsuite.TestSuite;
import com.eviware.soapui.support.GroovyUtils;
import com.eviware.soapui.support.XmlHolder;

import org.apache.log4j.*;


WsdlProject project = (WsdlProject) testRunner.getTestCase().getTestSuite().getProject();
RestService restService=null;
def utils = project.runAfterLoadScript();
//Utils utils = Utils.getInstance();
TestCase testCase = testRunner.getTestCase();
try{
	if(System.getProperty("catalina.base")!=null){
		String logFileName=System.getProperty("catalina.base")+"/logs/soapuiAPI.log";
		String logPattern=  "%d{yyyy-MM-dd HH:mm:ss.SSS} %C %m %n";
		String logFileRollup=  ".yyyy-MM-dd";
		//String logLevel=  context.expand( '${#Project#LOG_LEVEL}' )
		Layout layout = new PatternLayout(logPattern);
		DailyRollingFileAppender appender;
		try{
			appender = new DailyRollingFileAppender(layout, logFileName,logFileRollup);
			log = Logger.getRootLogger();
			log.setLevel((Level) Level.DEBUG);					
			log.addAppender(appender);
		}
		catch (IOException e){
			e.printStackTrace();
			log.error("Exception - "+e);
		}
	}
	log.info("in");
	TestSuite testSuite = testRunner.getTestCase().getTestSuite();
	testSuite.setPropertyValue("resultFileName", "");
	testSuite.setPropertyValue("responseDataSheetNames", "");
	testSuite.setPropertyValue("soapUIResponse","");
	//String wsdlName = project.getPropertyValue("wsdlName");
	String uploadFileLocation=project.getPropertyValue("uploadFileLocation");
		uploadFileLocation = uploadFileLocation.replace("\\","/");
	String dataSheetName = project.getPropertyValue("dataSheetName");
	//String opName=  project.getPropertyValue("operationName");
	String env= project.getPropertyValue("env");
		//testSuite.setPropertyValue("operationName",opName); 
	/*String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");*/
	String[]responseType = project.getPropertyValue("responseType").split(",");
	if(responseType.length>1){
		responseType[0]= "".equals(responseType[0].trim())? "Response1":responseType[0].trim();
		responseType[1]= "".equals(responseType[1].trim())? "Response2":responseType[1].trim();
		if(responseType[0].equals(responseType[1])){
			responseType[0]=responseType[0]+"1";
			responseType[1]=responseType[1]+"2";
		}
	}else{
		String r = responseType.length>0? responseType[0].trim():"";
		responseType = new String[2];
		responseType[0]= ("".equals(r) || "Response2".equals(r))? "Response1":r;
		responseType[1]= "Response2";
	}
	
	//String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
	//String outputFileName = utils.copyFileToNewFile(outputFilePath, uploadFileLocation+dataSheetName);
	//testSuite.setPropertyValue("resultFileName",outputFileName);
	
	//outputFilePath=outputFilePath+outputFileName;
	
	//outputFilePath=uploadFileLocation+dataSheetName;
	//project.setPropertyValue("outputFilePath",outputFilePath);
	
	File fp = new File(uploadFileLocation+dataSheetName);
	//File fp = new File(outputFilePath);
	//log.info(fp)	
	Workbook wb = Workbook.getWorkbook(fp);
	Sheet Endpoint = wb.getSheet("Endpoint");
	int countRows = Endpoint.getRows();
	int countColumns = Endpoint.getColumns();
	String[]  readEndpoints = new String[countRows];
	
	for (int readRow=1 ;readRow < countRows;readRow++){
		if("run".equalsIgnoreCase(Endpoint.getCell(0, readRow).getContents().trim())){
			//testSuite.setPropertyValue("resourcePath", Endpoint.getCell(1,readRow).getContents().trim());
			String resourcePath = Endpoint.getCell(1,readRow).getContents().trim();
			String resourceParameters = Endpoint.getCell(2,readRow).getContents().trim();
			String method = Endpoint.getCell(3,readRow).getContents().trim();
			String methodType = Endpoint.getCell(4,readRow).getContents().trim();
			String methodParameters = Endpoint.getCell(5,readRow).getContents().trim();
			String requestDataSheetName = Endpoint.getCell(6,readRow).getContents().trim();
			String responseDataSheetName = Endpoint.getCell(7,readRow).getContents().trim();
			String endpoint1 = Endpoint.getCell(8,readRow).getContents().trim();
			String endpoint2 = Endpoint.getCell(9,readRow).getContents().trim();
			
			restService = (RestService) project.addNewInterface(method, RestServiceFactory.REST_TYPE);
			restService.addEndpoint(endpoint1);
			RestResource restResource = restService.addNewResource( resourcePath.substring(resourcePath.lastIndexOf("/")+1), resourcePath);
			String []resourceParameter = resourceParameters.split("\n");
			for(int i=0;i<resourceParameter.length && !"".equals(resourceParameter[i].trim());i++){
				//log.info("resourceParameter::"+i+"::"+resourceParameter[i]);
				String []re=resourceParameter[i].split(",");
				
				RestParamProperty restParamProperty= restResource.addProperty(re[0]);//.setStyle(RestParamsPropertyHolder.ParameterStyle.TEMPLATE);
				switch(re[1]){
					case "TEMPLATE":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.TEMPLATE);
						break;
					case "HEADER":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.HEADER);
						break;
					case "MATRIX":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.MATRIX);
						break;
					case "PLAIN":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.PLAIN);
						break;
					default:
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.QUERY);
				}
				if(re.length>2){
					restParamProperty.setDefaultValue(re[2]);
				}
			}
			RestMethod restMethod=restResource.addNewMethod(method);
			switch(methodType){
				case "DELETE":
					restMethod.setMethod( RestRequestInterface.HttpMethod.DELETE );
					break;
				case "HEAD":
					restMethod.setMethod( RestRequestInterface.HttpMethod.HEAD );
					break;
				case "OPTIONS":
					restMethod.setMethod( RestRequestInterface.HttpMethod.OPTIONS );
					break;
				case "PATCH":
					restMethod.setMethod( RestRequestInterface.HttpMethod.PATCH );
					break;
				case "POST":
					restMethod.setMethod( RestRequestInterface.HttpMethod.POST );
					break;
				case "PUT":
					restMethod.setMethod( RestRequestInterface.HttpMethod.PUT );
					break;
				case "TRACE":
					restMethod.setMethod( RestRequestInterface.HttpMethod.TRACE );
					break;
				default:
					restMethod.setMethod( RestRequestInterface.HttpMethod.GET );
			}
			String []methodParameter = methodParameters.split("\n");
			for(int i=0;i<methodParameter.length && !"".equals(methodParameter[i].trim());i++){
				//log.info("methodParameter::"+i+"::"+methodParameter[i]);
				String []re=methodParameter[i].split(",");
				
				RestParamProperty restParamProperty = restMethod.addProperty(re[i]);
				switch(re[1]){
				case "TEMPLATE":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.TEMPLATE);
					break;
				case "HEADER":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.HEADER);
					break;
				case "MATRIX":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.MATRIX);
					break;
				case "PLAIN":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.PLAIN);
					break;
				default:
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.QUERY);
				}
				if(re.length>2){
					restParamProperty.setDefaultValue(re[2]);
				}
			}
			
			RestRequest restRequest1=restMethod.addNewRequest("Request1");
			if(responseType[0].equals(env)){
				restRequest1.setEndpoint(endpoint1);
			}else{
				restRequest1.setEndpoint(endpoint2);
			}
			Sheet requestDataSheet = wb.getSheet(requestDataSheetName);
			int reqCountRows = requestDataSheet.getRows();
			int reqCountColumns = requestDataSheet.getColumns();
			HashMap<String,String> paramMap = new HashMap<String,String>();
			for(int reqReadColumns=0 ;reqReadColumns < reqCountColumns;reqReadColumns++){
				String reqXPath= ""+requestDataSheet.getCell(reqReadColumns,0).getContents().trim();
				if("SK_".equals(reqXPath.substring(0,3))){
					log.info("Skip the param Key::"+reqXPath);
				}else{
					paramMap.put(reqXPath, ""+reqReadColumns);
					log.info("paramMap Key::"+reqXPath);
				}
			}

			utils.setOutputData(responseDataSheetName,"TEST CASE#",0,0);
			utils.setOutputData(responseDataSheetName,"SUCCESS FLAG",0,1);
			/*utils.setOutputData(responseDataSheetName,"errorCode",0,2);
			utils.setOutputData(responseDataSheetName,"errorMessage",0,3);
			utils.setOutputData(responseDataSheetName,"faultcode",0,4);
			utils.setOutputData(responseDataSheetName,"faultstring",0,5);
			utils.setOutputData(responseDataSheetName,"Response",0,6);*/
			Sheet responseDataSheet = wb.getSheet(responseDataSheetName);
			//int reqCountRows = responseDataSheet.getRows();
			int responseCountColumns = responseDataSheet.getColumns();
			for(int i=0;i<responseCountColumns;i++){
				utils.setOutputData(responseDataSheetName,responseDataSheet.getCell(i,0).getContents().trim(),0,2+i);
			}
			utils.setOutputData(responseDataSheetName,"FAULT STRING",0,2+responseCountColumns);
			utils.setOutputData(responseDataSheetName,"RESPONSE",0,2+responseCountColumns+1);
			//utils.setOutputData(responseDataSheetName,"RESULT",0,2+responseCountColumns+2);
			
			int reqReadRow=1;
			int totalTestCases=0;
			int successCount=0;
			int failureCount=0;
			int soapFaultCount=0;
			String exception="0";
			int writingRow=1;
			for(reqReadRow=1;reqReadRow < reqCountRows;reqReadRow++){
				String successFlag="true";
				//String errorCode="0";
				//String errorMessage="";
				//String faultcode="";
				String faultstring="";
				String responseContentAsXml="";
				try{
					for(Iterator it=paramMap.keySet().iterator();it.hasNext();){
						String name=(String) it.next();
						String value = requestDataSheet.getCell(Integer.parseInt(paramMap.get(name)),reqReadRow).getContents();
						if(value!=null && !"".equals(value)){
							restRequest1.setPropertyValue(name, value);
						}
					}
					log.info("before request");
					WsdlSubmit<RestRequest> response=restRequest1.submit(testRunner.getRunContext(), false);
					log.info("ContentAsXml::"+response.getResponse().getContentAsXml());
					responseContentAsXml=response.getResponse().getContentAsXml();
					
					if(responseContentAsXml.indexOf("<Fault")!= -1){
						soapFaultCount++;
						successFlag="false";
						//faultcode="4999";
						faultstring = responseContentAsXml.substring(responseContentAsXml.indexOf("<errors"),responseContentAsXml.indexOf("</errors>"));
					}else{
						successCount++;
						String response1Xml=responseContentAsXml.substring(responseContentAsXml.indexOf(">", responseContentAsXml.indexOf("<Response"))+1, responseContentAsXml.indexOf("</Response"));
						setResponseDataToSheet(context, wb.getSheet(responseDataSheetName), response1Xml, responseDataSheetName, writingRow, utils);
					}
					
					//utils.setOutputData(responseDataSheetName,response.getStatus(),reqReadRow,1);
					//utils.setOutputData(responseDataSheetName,response.getError(),reqReadRow,3);
				}catch(Exception e){
					//failureCount++;
					successFlag="false";
					//errorCode="4999";
					//errorMessage=""+e.getMessage();
					log.info("Exception in exicute::TestCase:"+reqReadRow+"~~~"+e.getMessage());
					exception=exception+"~~~~~~~~~~TestCase:"+reqReadRow+"~~~"+e.getMessage();
				}
				utils.setOutputData(responseDataSheetName,""+reqReadRow,writingRow,0);
				utils.setOutputData(responseDataSheetName,successFlag,writingRow,1,true,"true".equals(successFlag)? "GREEN":"RED");
				//utils.setOutputData(responseDataSheetName,errorCode,writingRow,2);
				//utils.setOutputData(responseDataSheetName,errorMessage,writingRow,3);
				//utils.setOutputData(responseDataSheetName,faultcode,writingRow,4);
				utils.setOutputData(responseDataSheetName,faultstring,writingRow,2+responseCountColumns);
				utils.setOutputData(responseDataSheetName,responseContentAsXml,writingRow,2+responseCountColumns+1);
				writingRow=writingRow+2;
			}
			totalTestCases=reqReadRow-1;

			writingRow++;
			utils.setOutputData(responseDataSheetName,"------- Summary --------",writingRow,1);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"TotalTestCases",writingRow,1);
			utils.setOutputData(responseDataSheetName,""+totalTestCases,writingRow,2);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SuccessCount",writingRow,1,true,"GREEN");
			utils.setOutputData(responseDataSheetName,""+successCount,writingRow,2,true,"GREEN");
			/*writingRow++;
			utils.setOutputData(responseDataSheetName,"FailureCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+failureCount,writingRow,2,true,"RED");*/
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SoapFaultCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+soapFaultCount,writingRow,2,true,"RED");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"Exception",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,exception,writingRow,2,true,"RED");
			
			String soapUIResponse=context.expand( '${#TestSuite#soapUIResponse}');
			soapUIResponse = soapUIResponse+method+","+totalTestCases+","+successCount+","+failureCount+","+soapFaultCount+","+exception+"::";
			testSuite.setPropertyValue("soapUIResponse", soapUIResponse);
			
			//========remove the interface===========
			project.removeInterface( restService );
			String responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}');
			testSuite.setPropertyValue("responseDataSheetNames", responseDataSheetNames+responseDataSheetName+",");
			/*log.info("Writing in File .....................");
			utils.writeInFile(outputFilePath, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);*/
		}
	}

}catch(Exception e){
	/*if(utils!=null){
		utils.dataCleanUp();
	}*/
	if(restService!=null)
		project.removeInterface( restService );
	log.info("Exception::"+e.getMessage());
}

log.info("Completed the Test Case execution");


public String setResponseDataToSheet(PropertyExpansionContext context, Sheet responseDataSheet, String response1, String sheetName,int startingRow, def utils) throws Exception {
	GroovyUtils groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
	XmlHolder response1Holder = groovyUtils.getXmlHolder(response1);
	int writeColumns=2;
	int reqReadColumns=0;
	String result="PASS";
	
	for(reqReadColumns=0;reqReadColumns<responseDataSheet.getColumns();reqReadColumns++){
		//boolean ignore=false;
		String xpath=""+responseDataSheet.getCell(reqReadColumns,0).getContents().trim();
		if( "IG_".equals(xpath.substring(0,3)) ){
			xpath="//"+xpath.substring(3);
			//ignore=true;
		}else{
			xpath="//"+xpath;
		}
		
		String[] value1=response1Holder.getNodeValues(xpath);
		String val1="";
		if(value1.length>1){
			for(int i=0;i<value1.length;i++){
				val1=val1+value1[i]+"###";
			}
		}else{
			val1=response1Holder.getNodeValue(xpath);
		}
		utils.setOutputData(sheetName, val1, startingRow,writeColumns);

		writeColumns++;
	}

	return result;
}
]]></script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>soapUIResponse</con:name><con:value>getOrder,2,1,0,1,0::</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>orders_Report20160504_09-16-19-515_295.xls</con:value></con:property><con:property><con:name>responseDataSheetNames</con:name><con:value>getOrderRes,</con:value></con:property></con:properties><con:tearDownScript><![CDATA[import com.eviware.soapui.impl.wsdl.WsdlProject;

log.info("!Start TearDown Script execution...................................");
WsdlProject project = (WsdlProject) testSuite.getProject();
//Utils utils = Utils.getInstance();
def utils = project.runAfterLoadScript();
String []responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}').split(",");
String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");
String dataSheetName=project.getPropertyValue("dataSheetName");
String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
testSuite.setPropertyValue("resultFileName",outputFileName);

//-------------------- Start Code to move the file in archive --------------------
String searchString=dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report";
String archiveFilePath = project.getPropertyValue("uploadFileLocation").replace("\\","/") + "archive/";
//List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /${searchString}/ }
File outputDir = new File(outputFilePath);
if(!outputDir.exists()){
	outputDir.mkdir();
}
File[] files = outputDir.listFiles();
//List<File> files1 = Arrays.asList(files);
log.info("********"+files.length);
File archieveDir = new File(archiveFilePath);
// Tests whether the directory denoted by this abstract pathname exists.
if(!archieveDir.exists()){
	archieveDir.mkdir();
}
for (int i=0 ; i < files.length;i++){
	if(files[i].getName().indexOf(".xls") != -1 && files[i].getName().startsWith(searchString)){
		if(files[i].renameTo(new File(archiveFilePath + files[i].getName()))){
			log.info("File is moved successful!");
		}else{
			log.info("File is failed to move!");
		}
    }
}
//-------------------- End Code to move the file in archive --------------------

for(String responseDataSheetName : responseDataSheetNames){
	if(!"".equals(responseDataSheetName.trim())){
		//--------------------START Writing in file--------------------
		log.info("responseDataSheetName: "+responseDataSheetName);
		try{
			utils.writeInFile(outputFilePath+outputFileName, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);
		}catch(Exception e){
			log.error("Got exception in writing data of responseDataSheetName: "+responseDataSheetName);
		}
		//--------------------END Writing in file--------------------
	}
}

if(utils!=null){
	utils.dataCleanUp();
}
log.info("Finished");
]]></con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Comparative Analysis Engine Rest" id="03be3cc9-3e60-4f33-9b60-98227aa4a2b0"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase" searchProperties="true" id="479841c1-37a5-4ae0-ac30-d4a6fdfc9ece"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="9851bea0-9b54-4333-9d4d-c5412031dbc7"><con:settings/><con:config><script><![CDATA[import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;

import jxl.Sheet;
import jxl.Workbook;

import com.eviware.soapui.impl.rest.RestMethod;
import com.eviware.soapui.impl.rest.RestRequest;
import com.eviware.soapui.impl.rest.RestResource;
import com.eviware.soapui.impl.rest.RestService;
import com.eviware.soapui.impl.rest.RestServiceFactory;
import com.eviware.soapui.impl.rest.support.RestParamProperty;
import com.eviware.soapui.impl.rest.support.RestParamsPropertyHolder;
import com.eviware.soapui.impl.rest.RestRequestInterface;
import com.eviware.soapui.impl.wsdl.WsdlProject;
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.model.testsuite.TestCase;
import com.eviware.soapui.model.testsuite.TestSuite;
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext;
import com.eviware.soapui.support.GroovyUtils;
import com.eviware.soapui.support.XmlHolder;

import org.apache.log4j.*;



WsdlProject project = (WsdlProject) testRunner.getTestCase().getTestSuite().getProject();
RestService restService=null;
def utils = project.runAfterLoadScript();
//Utils utils = Utils.getInstance();
TestCase testCase = testRunner.getTestCase();
try{
	if(System.getProperty("catalina.base")!=null){
		String logFileName=System.getProperty("catalina.base")+"/logs/soapuiAPI.log";
		String logPattern=  "%d{yyyy-MM-dd HH:mm:ss.SSS} %C %m %n";
		String logFileRollup=  ".yyyy-MM-dd";
		//String logLevel=  context.expand( '${#Project#LOG_LEVEL}' )
		Layout layout = new PatternLayout(logPattern);
		DailyRollingFileAppender appender;
		try{
			appender = new DailyRollingFileAppender(layout, logFileName,logFileRollup);
			log = Logger.getRootLogger();
			log.setLevel((Level) Level.DEBUG);					
			log.addAppender(appender);
		}
		catch (IOException e){
			e.printStackTrace();
			log.error("Exception - "+e);
		}
	}
	log.info("in");
	TestSuite testSuite = testRunner.getTestCase().getTestSuite();
	testSuite.setPropertyValue("resultFileName", "");
	testSuite.setPropertyValue("responseDataSheetNames", "");
	testSuite.setPropertyValue("soapUIResponse","");
	//String wsdlName = project.getPropertyValue("wsdlName");
	String uploadFileLocation=project.getPropertyValue("uploadFileLocation");
		uploadFileLocation = uploadFileLocation.replace("\\","/");
	String dataSheetName = project.getPropertyValue("dataSheetName");
	//String opName=  project.getPropertyValue("operationName");
	String env= project.getPropertyValue("env");
		//testSuite.setPropertyValue("operationName",opName); 
	/*String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");*/
	String[]responseType = project.getPropertyValue("responseType").split(",");
	if(responseType.length>1){
		responseType[0]= "".equals(responseType[0].trim())? "Response1":responseType[0].trim();
		responseType[1]= "".equals(responseType[1].trim())? "Response2":responseType[1].trim();
		if(responseType[0].equals(responseType[1])){
			responseType[0]=responseType[0]+"1";
			responseType[1]=responseType[1]+"2";
		}
	}else{
		String r = responseType.length>0? responseType[0].trim():"";
		responseType = new String[2];
		responseType[0]= ("".equals(r) || "Response2".equals(r))? "Response1":r;
		responseType[1]= "Response2";
	}

	//String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
	//String outputFileName = utils.copyFileToNewFile(outputFilePath, uploadFileLocation+dataSheetName);
	//testSuite.setPropertyValue("resultFileName",outputFileName);
	
	//outputFilePath=outputFilePath+outputFileName;
	
	//outputFilePath=uploadFileLocation+dataSheetName;
	//project.setPropertyValue("outputFilePath",outputFilePath);

	File fp = new File(uploadFileLocation+dataSheetName);
	//File fp = new File(outputFilePath);
	//log.info(fp)	
	Workbook wb = Workbook.getWorkbook(fp);
	Sheet Endpoint = wb.getSheet("Endpoint");
	int countRows = Endpoint.getRows();
	int countColumns = Endpoint.getColumns();
	//String[]  readEndpoints = new String[countRows];
	
	/*String[]responseType=new String[2];
	responseType[0] = Endpoint.getCell(8,0).getContents().trim();
	responseType[1] = Endpoint.getCell(9,0).getContents().trim();
	if("".equals(responseType[0]) || "".equals((responseType[0].substring(0, responseType[0].toLowerCase().indexOf("endpoint"))).trim() ) ){
		responseType[0]="Response1";
	}else{
		responseType[0]=(responseType[0].substring(0, responseType[0].toLowerCase().indexOf("endpoint"))).trim();
	}
	if("".equals(responseType[1]) || "".equals((responseType[1].substring(1, responseType[1].toLowerCase().indexOf("endpoint"))).trim() ) ){
		responseType[1]="Response1";
	}else{
		responseType[1]=(responseType[1].substring(0, responseType[1].toLowerCase().indexOf("endpoint"))).trim();
	}
	if(responseType[0].equalsIgnoreCase(responseType[1])){
		responseType[0]=responseType[0]+"1";
		responseType[1]=responseType[1]+"2";
	}*/
	log.info("start");
	for (int readRow=1 ;readRow < countRows;readRow++){
		if("run".equalsIgnoreCase(Endpoint.getCell(0, readRow).getContents().trim())){
			//testSuite.setPropertyValue("resourcePath", Endpoint.getCell(1,readRow).getContents().trim());
			String resourcePath = Endpoint.getCell(1,readRow).getContents().trim();
			String resourceParameters = Endpoint.getCell(2,readRow).getContents().trim();
			String method = Endpoint.getCell(3,readRow).getContents().trim();
			String methodType = Endpoint.getCell(4,readRow).getContents().trim();
			String methodParameters = Endpoint.getCell(5,readRow).getContents().trim();
			String requestDataSheetName = Endpoint.getCell(6,readRow).getContents().trim();
			String responseDataSheetName = Endpoint.getCell(7,readRow).getContents().trim();
			String endpoint1 = Endpoint.getCell(8,readRow).getContents().trim();
			String endpoint2 = Endpoint.getCell(9,readRow).getContents().trim();
			
			restService = (RestService) project.addNewInterface(method, RestServiceFactory.REST_TYPE);
			restService.addEndpoint(endpoint1);
			RestResource restResource = restService.addNewResource( resourcePath.substring(resourcePath.lastIndexOf("/")+1), resourcePath);
			String []resourceParameter = resourceParameters.split("\n");
			for(int i=0;i<resourceParameter.length && !"".equals(resourceParameter[i].trim());i++){
				//log.info("resourceParameter::"+i+"::"+resourceParameter[i]);
				String []re=resourceParameter[i].split(",");
				
				RestParamProperty restParamProperty= restResource.addProperty(re[0]);//.setStyle(RestParamsPropertyHolder.ParameterStyle.TEMPLATE);
				switch(re[1]){
					case "TEMPLATE":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.TEMPLATE);
						break;
					case "HEADER":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.HEADER);
						break;
					case "MATRIX":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.MATRIX);
						break;
					case "PLAIN":
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.PLAIN);
						break;
					default:
						restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.QUERY);
				}
				if(re.length>2){
					restParamProperty.setDefaultValue(re[2]);
				}
			}
			RestMethod restMethod=restResource.addNewMethod(method);
			switch(methodType){
				case "DELETE":
					restMethod.setMethod( RestRequestInterface.HttpMethod.DELETE );
					break;
				case "HEAD":
					restMethod.setMethod( RestRequestInterface.HttpMethod.HEAD );
					break;
				case "OPTIONS":
					restMethod.setMethod( RestRequestInterface.HttpMethod.OPTIONS );
					break;
				case "PATCH":
					restMethod.setMethod( RestRequestInterface.HttpMethod.PATCH );
					break;
				case "POST":
					restMethod.setMethod( RestRequestInterface.HttpMethod.POST );
					break;
				case "PUT":
					restMethod.setMethod( RestRequestInterface.HttpMethod.PUT );
					break;
				case "TRACE":
					restMethod.setMethod( RestRequestInterface.HttpMethod.TRACE );
					break;
				default:
					restMethod.setMethod( RestRequestInterface.HttpMethod.GET );
			}
			String []methodParameter = methodParameters.split("\n");
			for(int i=0;i<methodParameter.length && !"".equals(methodParameter[i].trim());i++){
				//log.info("methodParameter::"+i+"::"+methodParameter[i]);
				String []re=methodParameter[i].split(",");
				
				RestParamProperty restParamProperty = restMethod.addProperty(re[i]);
				switch(re[1]){
				case "TEMPLATE":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.TEMPLATE);
					break;
				case "HEADER":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.HEADER);
					break;
				case "MATRIX":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.MATRIX);
					break;
				case "PLAIN":
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.PLAIN);
					break;
				default:
					restParamProperty.setStyle(RestParamsPropertyHolder.ParameterStyle.QUERY);
				}
				if(re.length>2){
					restParamProperty.setDefaultValue(re[2]);
				}
			}
			
			RestRequest restRequest1=restMethod.addNewRequest("Request1");
			RestRequest restRequest2=restMethod.addNewRequest("Request2");
			restRequest1.setEndpoint(endpoint1);
			restRequest2.setEndpoint(endpoint2);
			
			Sheet requestDataSheet = wb.getSheet(requestDataSheetName);
			int reqCountRows = requestDataSheet.getRows();
			int reqCountColumns = requestDataSheet.getColumns();
			HashMap<String,String> paramMap = new HashMap<String,String>();
			for(int reqReadColumns=0 ;reqReadColumns < reqCountColumns;reqReadColumns++){
				String reqXPath= ""+requestDataSheet.getCell(reqReadColumns,0).getContents().trim();
				if("SK_".equals(reqXPath.substring(0,3))){
					log.info("Skip the param Key::"+reqXPath);
				}else{
					paramMap.put(reqXPath, ""+reqReadColumns);
					log.info("paramMap Key::"+reqXPath);
				}
			}

			utils.setOutputData(responseDataSheetName,"TEST CASE#",0,0);
			utils.setOutputData(responseDataSheetName,"RESPONSE TYPE",0,1);
			Sheet responseDataSheet = wb.getSheet(responseDataSheetName);
			//int reqCountRows = responseDataSheet.getRows();
			int responseCountColumns = responseDataSheet.getColumns();
			for(int i=0;i<responseCountColumns;i++){
				utils.setOutputData(responseDataSheetName,responseDataSheet.getCell(i,0).getContents().trim(),0,2+i);
			}
			utils.setOutputData(responseDataSheetName,"FAULT STRING",0,2+responseCountColumns);
			utils.setOutputData(responseDataSheetName,"RESPONSE",0,2+responseCountColumns+1);
			utils.setOutputData(responseDataSheetName,"RESULT",0,2+responseCountColumns+2);
			
			int reqReadRow=1;
			int totalTestCases=0;
			int successCount=0;
			int faultCount=0;
			int failureCount=0;
			String exception="0";
			int writingRow=1;
			for(reqReadRow=1;reqReadRow < reqCountRows;reqReadRow++){
				//String successFlag="true";
				//String errorCode="0";
				//String errorMessage="";
				//String faultcode="";
				String faultstring1="";
				String faultstring2="";
				String response1ContentAsXml="";
				String response2ContentAsXml="";
				String result="PASS";
				utils.setOutputData(responseDataSheetName, ""+reqReadRow, writingRow,0);
				utils.setOutputData(responseDataSheetName, responseType[0]+" RESPONSE", writingRow,1);
				utils.setOutputData(responseDataSheetName, responseType[1]+" RESPONSE", writingRow+1,1);
				try{
					for(Iterator it=paramMap.keySet().iterator();it.hasNext();){
						String name=(String) it.next();
						String value = requestDataSheet.getCell(Integer.parseInt(paramMap.get(name)),reqReadRow).getContents();
						if(value!=null && !"".equals(value)){
							restRequest1.setPropertyValue(name, value);
							restRequest2.setPropertyValue(name, value);
						}
					}
					//log.info("before request");
					WsdlSubmit<RestRequest> response1=restRequest1.submit(testRunner.getRunContext(), false);
					response1ContentAsXml=response1.getResponse().getContentAsXml();
					//log.info("ContentAsXml::"+response1.getResponse().getContentAsXml());
					//log.info("ContentAsString()::"+response1.getResponse().getContentAsString());

					WsdlSubmit<RestRequest> response2=restRequest2.submit(testRunner.getRunContext(), false);
					response2ContentAsXml=response2.getResponse().getContentAsXml();
					//log.info("ContentAsXml::"+response2.getResponse().getContentAsXml());
					//log.info("ContentAsString()::"+response2.getResponse().getContentAsString());

					utils.setOutputData(responseDataSheetName, response1ContentAsXml, writingRow, 2+responseCountColumns+1);
					utils.setOutputData(responseDataSheetName, response2ContentAsXml, writingRow+1, 2+responseCountColumns+1);
						
					if(response1ContentAsXml.indexOf("<Fault")!= -1 || response2ContentAsXml.indexOf("<Fault")!= -1){
						//result="FAIL";
						//faultCount++;
						//successFlag="false";
						//faultcode="4999";
						//faultstring = response1ContentAsXml.substring(response1ContentAsXml.indexOf("<errors"),response1ContentAsXml.indexOf("</errors>"));
						if(response1ContentAsXml.indexOf("<Fault")!= -1 && response2ContentAsXml.indexOf("<Fault")!= -1){
							faultstring1 = response1ContentAsXml.substring(response1ContentAsXml.indexOf("<errors"),response1ContentAsXml.indexOf("</errors>"));
							faultstring2 = response2ContentAsXml.substring(response2ContentAsXml.indexOf("<errors"),response2ContentAsXml.indexOf("</errors>"));
							if(faultstring1!=null && faultstring1.equals(faultstring2)){
								result="PASS";
								successCount++;
							}else{
								result="FAULT";
								faultCount++;
							}
						}else if(response1ContentAsXml.indexOf("<Fault")!= -1){
							faultstring1 = response1ContentAsXml.substring(response1ContentAsXml.indexOf("<errors"),response1ContentAsXml.indexOf("</errors>"));
							result="FAULT";
							faultCount++;
						}else{
							faultstring2 = response2ContentAsXml.substring(response2ContentAsXml.indexOf("<errors"),response2ContentAsXml.indexOf("</errors>"));
							result="FAULT";
							faultCount++;
						}
						//compareResponse(context, wb.getSheet(responseDataSheetName), response1ContentAsXml, response1ContentAsXml, responseDataSheetName, writingRow, utils);
						utils.setOutputData(responseDataSheetName, faultstring1, writingRow, 2+responseCountColumns);
						utils.setOutputData(responseDataSheetName, faultstring2, writingRow+1, 2+responseCountColumns);
						
					}else if(response1ContentAsXml.indexOf("<Response")!= -1 && response2ContentAsXml.indexOf("<Response")!= -1){
						//successCount++;
						String response1Xml = response1ContentAsXml.substring(response1ContentAsXml.indexOf(">", response1ContentAsXml.indexOf("<Response"))+1, response1ContentAsXml.indexOf("</Response"));
						String response2Xml = response2ContentAsXml.substring(response2ContentAsXml.indexOf(">", response2ContentAsXml.indexOf("<Response"))+1, response2ContentAsXml.indexOf("</Response"));
						result = compareResponse(context, wb.getSheet(responseDataSheetName), response1Xml, response2Xml, responseDataSheetName, writingRow, utils);
						if("PASS".equals(result)){
							successCount++;
						}else{
							failureCount++;
						}
						
					}else{
						result="FAIL";
						failureCount++;
						log.info("null/unexpected response");
					}
					
				}catch(Exception e){
					result="FAIL";
					failureCount++;
					//successFlag="false";
					//errorCode="4999";
					//errorMessage=""+e.getMessage();
					log.info("Exception in execute::"+e.getMessage());
					exception=exception+"~~~~~~~~~~TestCase:"+reqReadRow+"~~~"+e.getMessage();
				}

				utils.setOutputData(responseDataSheetName, result, writingRow,2+responseCountColumns+2, true, "PASS".equals(result)? "GREEN":"RED");
				writingRow=writingRow+3;
				
			}
			totalTestCases=reqReadRow-1;
			
			writingRow++;
			utils.setOutputData(responseDataSheetName,"------- Summary --------",writingRow,1);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"TotalTestCases",writingRow,1);
			utils.setOutputData(responseDataSheetName,""+totalTestCases,writingRow,2);
			writingRow++;
			utils.setOutputData(responseDataSheetName,"SuccessCount",writingRow,1,true,"GREEN");
			utils.setOutputData(responseDataSheetName,""+successCount,writingRow,2,true,"GREEN");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"FailureCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+failureCount,writingRow,2,true,"RED");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"FaultCount",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,""+faultCount,writingRow,2,true,"RED");
			writingRow++;
			utils.setOutputData(responseDataSheetName,"Exception",writingRow,1,true,"RED");
			utils.setOutputData(responseDataSheetName,exception,writingRow,2,true,"RED");
			
			String soapUIResponse=context.expand( '${#TestSuite#soapUIResponse}');
			soapUIResponse = soapUIResponse+method+","+totalTestCases+","+successCount+","+failureCount+","+faultCount+","+exception+"::";
			testSuite.setPropertyValue("soapUIResponse", soapUIResponse);
			
			//========remove the interface===========
			project.removeInterface( restService );
			String responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}');
			testSuite.setPropertyValue("responseDataSheetNames", responseDataSheetNames+responseDataSheetName+",");
			/*utils.writeInFile(outputFilePath, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);*/
		}
	}

}catch(Exception e){
	/*if(utils!=null){
		utils.dataCleanUp();
	}*/
	if(restService!=null)
		project.removeInterface( restService );
	log.info("Exception::"+e.getMessage());
}

log.info("Completed the Test Case execution");



public String compareResponse(PropertyExpansionContext context, Sheet responseDataSheet, String response1, String response2, String sheetName,int startingRow, def utils) throws Exception {
	GroovyUtils groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
	XmlHolder response1Holder = groovyUtils.getXmlHolder(response1);
	XmlHolder response2Holder = groovyUtils.getXmlHolder(response2);
	//log.info("response1Holder::"+response1Holder.getXml());
	//Utils utils=new Utils();
	//int rowIncrement=3;
	int writeColumns=2;
	int reqReadColumns=0;
	String result="PASS";
	
	//utils.setOutputData(sheetName, "TestCase#"+startingRow, startingRow,0);
	//utils.setOutputData(sheetName, "Response1", startingRow,1);
	//utils.setOutputData(sheetName, "Response2", startingRow+1,1);
	
	for(reqReadColumns=0;reqReadColumns<responseDataSheet.getColumns();reqReadColumns++){
		boolean ignore=false;
		String xpath=""+responseDataSheet.getCell(reqReadColumns,0).getContents().trim();
		if( "IG_".equals(xpath.substring(0,3)) ){
			xpath="//"+xpath.substring(3);
			ignore=true;
		}else{
			xpath="//"+xpath;
		}
		
		String[] value1=response1Holder.getNodeValues(xpath);
		//log.info("length:"+value1);
		String[] value2=response2Holder.getNodeValues(xpath);
		ArrayList<String> list1 = new ArrayList<String>();
		ArrayList<String> list2 = new ArrayList<String>();
		String val1="";
		String val2="";
		if(value1.length>1){
			list1 = new ArrayList<String>(Arrays.asList(value1));
			for(int i=0;i<value1.length;i++){
				val1=val1+value1[i]+"###";
			}
		}else{
			val1=response1Holder.getNodeValue(xpath);
		}
		
		if(value2.length>1){
			list2 = new ArrayList<String>(Arrays.asList(value2));
			for(int i=0;i<value2.length;i++){
				val2=val2+value2[i]+"###";
			}
		}else{
			val2=response2Holder.getNodeValue(xpath);
		}
		
		//log.info("value1::"+value1+"::xpath::"+xpath);
		if(ignore){
			utils.setOutputData(sheetName, val1, startingRow,writeColumns);
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
		}else if(value1.length>1 || value2.length>1){
			utils.setOutputData(sheetName, val1, startingRow,writeColumns);
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
			if(list1.containsAll(list2) && list2.containsAll(list1)){
				
			}else{
				result="FAIL";
			}
			
		}else if(val1.equals(val2) ){
			utils.setOutputData(sheetName, val1, startingRow,writeColumns);
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
		}else{
			result="FAIL";
			utils.setOutputData(sheetName, val1, startingRow,writeColumns,true,"RED");
			utils.setOutputData(sheetName, val2, startingRow+1,writeColumns);
		}

		writeColumns++;
	}
	
	//utils.setOutputData(sheetName, response1, startingRow,writeColumns);
	//utils.setOutputData(sheetName, response2, startingRow+1,writeColumns++);
	
	//utils.setOutputData(sheetName, result, startingRow,writeColumns++, true, "PASS".equals(result)? "GREEN":"RED");
	//utils.setOutputData(sheetName, value2, startingRow+1,reqReadColumns+startColPoint);
	return result;
}
]]></script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>soapUIResponse</con:name><con:value>getOrder,2,2,0,0,0::</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>orders_Report20160504_09-16-03-050_688.xls</con:value></con:property><con:property><con:name>responseDataSheetNames</con:name><con:value>getOrderRes,</con:value></con:property></con:properties><con:tearDownScript><![CDATA[import com.eviware.soapui.impl.wsdl.WsdlProject;

log.info("!Start TearDown Script execution...................................");
WsdlProject project = (WsdlProject) testSuite.getProject();
//Utils utils = Utils.getInstance();
def utils = project.runAfterLoadScript();
String []responseDataSheetNames = context.expand( '${#TestSuite#responseDataSheetNames}').split(",");
String outputFilePath=project.getPropertyValue("outputFilePath");
		outputFilePath = outputFilePath.replace("\\","/");
String dataSheetName=project.getPropertyValue("dataSheetName");
String outputFileName = dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report"+(String.format("%tY%<tm%<td_%<tH-%<tM-%<tS-%<tL_", new Date()))+(int)(Math.random()*1000)+".xls";
testSuite.setPropertyValue("resultFileName",outputFileName);

//-------------------- Start Code to move the file in archive --------------------
String searchString=dataSheetName.substring(0,dataSheetName.lastIndexOf("."))+"_Report";
String archiveFilePath = project.getPropertyValue("uploadFileLocation").replace("\\","/") + "archive/";
//List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /${searchString}/ }
File[] files = new File(outputFilePath).listFiles();
//List<File> files1 = Arrays.asList(files);
log.info("********"+files.length);
File archieveDir = new File(archiveFilePath);
// Tests whether the directory denoted by this abstract pathname exists.
if(!archieveDir.exists()){
	archieveDir.mkdir();
}
for (int i=0 ; i < files.length;i++){
	if(files[i].getName().indexOf(".xls") != -1 && files[i].getName().startsWith(searchString)){
		if(files[i].renameTo(new File(archiveFilePath + files[i].getName()))){
			log.info("File is moved successful!");
		}else{
			log.info("File is failed to move!");
		}
    }
}
//-------------------- End Code to move the file in archive --------------------

for(String responseDataSheetName : responseDataSheetNames){
	if(!"".equals(responseDataSheetName.trim())){
		//--------------------START Writing in file--------------------
		log.info("responseDataSheetName: "+responseDataSheetName);
		try{
			utils.writeInFile(outputFilePath+outputFileName, responseDataSheetName, utils.getOutputList(responseDataSheetName));
			utils.dataCleanUp(responseDataSheetName);
		}catch(Exception e){
			log.error("Got exception in writing data of responseDataSheetName: "+responseDataSheetName);
		}
		//--------------------END Writing in file--------------------
	}
}

if(utils!=null){
	utils.dataCleanUp();
}
log.info("Finished");
]]></con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Run Engine SOAP1" id="d5721661-3713-4990-be19-ff97ca9f3099"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCaseStep" searchProperties="true" id="5d8cd96e-a2bb-427c-8abe-9f89f1bdb695"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="d53a8ab5-6118-4688-9a63-c70a4981bfe4"><con:settings/><con:config><script><![CDATA[import jxl.*
import java.util.*;
import jxl.write.*;
import jxl.write.Boolean;
import jxl.write.Number;
import jxl.write.biff.RowsExceededException;
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.impl.wsdl.WsdlProject
import com.eviware.soapui.impl.wsdl.WsdlInterface
import com.eviware.soapui.impl.WsdlInterfaceFactory
import com.eviware.soapui.impl.wsdl.WsdlOperation
import com.eviware.soapui.impl.wsdl.WsdlRequest
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.impl.wsdl.WsdlSubmitContext;
import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.model.iface.Response;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlOptions;
import com.eviware.soapui.impl.wsdl.actions.iface.RemoveInterfaceAction;

import org.apache.log4j.*;



def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def projectDir = groovyUtils.projectPath
//log.info(projectDir);
String endPointCAP="";
String endPointWM="";

def project = testRunner.getTestCase().getTestSuite().getProject();
def utils = project.runAfterLoadScript();
def testCase = testRunner.testCase;
WsdlProject wsdlproject = new WsdlProject() 
WsdlInterface iface 
WsdlOperation operation
XmlObject resultWM
XmlObject resultCAP
int startingRow=0;
int endOfRow =1;
int comResult=2; 
int startAtRow  = 0
String testCaseNo
String FileName=""
String sheetName=""
int rowCounter=0;
String operationName=""
String readWSDL="false";
String soapUIResponse="";
try { 
	if(System.getProperty("catalina.base")!=null){
		String logFileName=System.getProperty("catalina.base")+"/logs/soapuiAPI.log";
		String logPattern=  "%d{yyyy-MM-dd HH:mm:ss.SSS} %C %m %n";
		String logFileRollup=  ".yyyy-MM-dd";
		//String logLevel=  context.expand( '${#Project#LOG_LEVEL}' )
		Layout layout = new PatternLayout(logPattern);
		DailyRollingFileAppender appender;
		try{
			appender = new DailyRollingFileAppender(layout, logFileName,logFileRollup);
			log = Logger.getRootLogger();
			log.setLevel((Level) Level.DEBUG);					
			log.addAppender(appender);
		}
		catch (IOException e){
			e.printStackTrace();
			log.error("Exception - "+e);
		}
	}
def testSuite = testRunner.getTestCase().getTestSuite()
def wsdlName = project.getPropertyValue("wsdlName");
log.info("wsdlName::"+wsdlName);
def dataSheetName = project.getPropertyValue("dataSheetName");
def opName=  project.getPropertyValue("operationName");
def env= project.getPropertyValue("env");
testSuite.setPropertyValue("operationName",opName); 
def outputFilePath=project.getPropertyValue("outputFilePath");
//log.info(wsdlName);
//log.info(dataSheetName)
//File fp = new File(projectDir+"/"+dataSheetName) 	
File fp = new File(outputFilePath+dataSheetName)
//log.info(fp)	
	wb = Workbook.getWorkbook(fp)
	Endpoint = wb.getSheet("Endpoint")
	countRows = Endpoint.getRows()
	countColumns=Endpoint.getColumns()
	def  readEndpoints = new String[countRows];
	
	int r=0;
			for (int readRow=1 ;readRow < countRows;readRow++){
		//	log.info(Endpoint.getCell(0, readRow).getContents().trim())
			
			if(Endpoint.getCell(0, readRow).getContents().trim()=='run'){
				
			for (int j=0 ;j < countColumns;j++){
				
				readEndpoints[readRow]=Endpoint.getCell(0, readRow).getContents().trim()	
				
				if(readEndpoints[readRow]=='run'){
					j++;
				//	log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					if(readWSDL == "false"){
						//log.info(project)
						//log.info(projectDir)
						//log.info(Endpoint.getCell(j, readRow).getContents().trim())
						//log.info(projectDir+"/"+wsdlName)
						
					//iface= WsdlInterfaceFactory.importWsdl(project, projectDir+"/"+wsdlName, true )[0]
					String wsdlURL= Endpoint.getCell(1, readRow).getContents().trim();
					if(wsdlURL.indexOf("/")>=0){
						log.info("creating WsdlInterface......."+wsdlURL);
						iface= WsdlInterfaceFactory.importWsdl(project, wsdlURL, true )[0]
					}else{
						log.info("creating WsdlInterface.......");
						iface= WsdlInterfaceFactory.importWsdl(project, outputFilePath+"/"+wsdlName, true )[0]
					}
					 //log.info(2)
					 readWSDL="true";
					}
					//log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					testSuite.setPropertyValue("OutputFileName",Endpoint.getCell(j, readRow).getContents().trim().substring(0,Endpoint.getCell(j, readRow).getContents().trim().indexOf(".")));
				
					j++;
					operationName=Endpoint.getCell(j, readRow).getContents().trim();
					//log.info(operationName)
					soapUIResponse=soapUIResponse+operationName;
					testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse+",0,0,0");
					operation = (WsdlOperation) iface.getOperationByName(operationName) ;
					//log.info(" operation -  "+operationName)
					j++;
					testCase.setPropertyValue("inputColumnSheet", Endpoint.getCell(j,readRow).getContents().trim());
					testSuite.setPropertyValue("outputFileName"+readRow, Endpoint.getCell(j,readRow).getContents().trim());
					FileName=FileName.concat("outputFileName"+readRow+",");
					testSuite.setPropertyValue("FileName",FileName);
					
					j++;
					testCase.setPropertyValue("outputColumnSheet", Endpoint.getCell(j, readRow).getContents().trim());
					j++;
					endPointWM=Endpoint.getCell(j, readRow).getContents().trim()
					j++;
					endPointCAP=Endpoint.getCell(j,readRow).getContents().trim()	
					if((project.getPropertyValue("endpoint1") != null)){
						endPointCAP=project.getPropertyValue("endpoint1");
					}

						if(project.getPropertyValue("endpoint2") != null){
						endPointWM=project.getPropertyValue("endpoint2");
					}
					log.info("endPointCAP--"+endPointCAP)
					log.info("endPointWM--"+endPointWM)
					
					
					
						}
				
				}
		
			
			


	int row= 0;
	
	sheet = wb.getSheet(testCase.getPropertyValue("inputColumnSheet"))
	columns = sheet.getColumns()
	rows = sheet.getRows()
	columns=sheet.getColumns()
	int startAtColumn = 0
	int totalTestCases=rows - 1;
	int success=0;
	int failure=0;	
	int soapfault=0;
	String soapfaultflagCAP="false"
	String soapfaultflagWM="false"
	startAtRow  = 0
	testCaseNo=0
	String contentCAP
	String contentWM
	String unretrybleError="false"
	String filterList="";
	
	def  valCAP	= new String[columns];

	
for (int j=1 ;j < columns;j++)
	{
		valCAP[j]=sheet.getCell(j, 0).getContents().trim()
		testSuite.setPropertyValue("valCAP"+j, sheet.getCell(j, startAtRow).getContents().trim());
		//log.info(sheet.getCell(j, startAtRow).getContents().trim())
		 if(sheet.getCell(j, startAtRow).getContents().trim().indexOf("SK_") != -1){
                                                filterList=filterList + ","+j;
                                }
	}
	//log.info(filterList)
	int countRow=1;	

for (int i =1; i<rows; i++)
	{
			if(i==1){
			success=0;
			failure=0;
			soapfault=0;
			startingRow=1;
			endOfRow =2;
			comResult=3; 
			}else{
			startingRow=startingRow+3;
			endOfRow=endOfRow+3;
			comResult=comResult+3;	
			}
			log.info("Excecuting Test case# "+i);
			//log.info("----------------------------"+startingRow);
			WsdlRequest requestCAP = operation.addNewRequest("requestCAP") 
			def capRequest = operation.createRequest(true) 
			requestCAP.setRequestContent(capRequest) ;
			requestCAP.setEndpoint(endPointCAP);
			//requestCAP.submit(new WsdlSubmitContext(requestCAP),false)
			def holderCAP = new XmlHolder(capRequest)

			
			WsdlRequest requestWM = operation.addNewRequest("requestWM") 
			def wmRequest = operation.createRequest(true) 
			requestWM.setRequestContent(wmRequest) ;
			requestWM.setEndpoint(endPointWM);
			def holderWM = new XmlHolder(wmRequest)
		
		
		for (int j=1 ;j < columns;j++)
		 	{
				if( filterList.indexOf(j+"") != -1){
                                                   continue;
				}
		 		//log.info(testSuite.getPropertyValue("valCAP"+j))
		 		
		 		if ( testSuite.getPropertyValue("valCAP"+j).indexOf("OP_").equals(-1)){
		 		//log.info(testSuite.getPropertyValue("valCAP"+j).indexOf("OP_"))
				holderCAP.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
				holderWM.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
			
			}else{
				
				
				String removeVal=testSuite.getPropertyValue("valCAP"+j).substring(3);
				//log.info("removing optional node ---"+removeVal)
				//log.info(holderCAP.containsKey(removeVal))
				
				holderCAP.removeDomNodes("//"+removeVal) 
				holderWM.removeDomNodes("//"+removeVal) 
			
			}
		 	}

			requestCAP.setRequestContent(holderCAP.getXml())
			String responseCAPContent
			String responseWMContent
			String content
			 XmlObject xmlWMResponse
			 XmlObject xmlCAPResponse

if(env =="CAP"){
				try{
			WsdlSubmit submitCAP = (WsdlSubmit) requestCAP.submit( new WsdlSubmitContext(requestCAP), false );
			Response responseCAP = submitCAP.getResponse();
			responseCAPContent= responseCAP.getContentAsString();
			 xmlCAPResponse = XmlUtils.createXmlObject( responseCAPContent );
			 contentCAP=responseCAPContent;
			}catch(Exception e){
			contentCAP="CAP Socket Time Out Endpoint -" +endPointCAP ;
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			//log.error(contentCAP);
			break;
			}
			if(responseCAPContent.indexOf("No service was found")!= -1){
				contentCAP="No service was found at CAP endpoint -" +endPointCAP ;
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
				//log.error(contentCAP);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
			//log.error(responseCAPContent)
			if(responseCAPContent.indexOf("errorCode")== -1 && responseCAPContent.indexOf(":Fault")!= -1){
			if(responseCAPContent.indexOf("<soap:Text")!= -1 || responseCAPContent.indexOf("faultcode")!= -1){
				
				if(responseCAPContent.indexOf("<soap:Text")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("<soap:Text"),responseCAPContent.indexOf("</soap:Text>")) ;
				}else if(responseCAPContent.indexOf("<soap:Fault")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soap:Fault"),responseCAPContent.indexOf("</soap:Fault>")) ;	
				}else if(responseCAPContent.indexOf("<soapenv:Fault")!= -1 ){

				contentCAP="SOAP ENV FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soapenv:Fault"),responseCAPContent.indexOf("</soapenv:Fault>")) ;	
				}
				soapfaultflagCAP="true"
			}else{
				contentCAP="SOAP FAULT:"+responseCAPContent ;
				soapfaultflagCAP="false"
			}
				
				//log.error("soapfaultflagCAP"+soapfaultflagCAP);
				//log.error(contentCAP);
				
				

			}


			sheetOutput = wb.getSheet(testCase.getPropertyValue("outputColumnSheet"))	
			columnsOutput = sheetOutput.getColumns()
			rowsOutput = sheetOutput.getRows()
			testCaseNo= i;
		
			String result="PAAS"
			String ignoreComparision="false"

			for (int i1 =0; i1<rowsOutput; i1++) {	
					

	for (int j1=0 ;j1 < columnsOutput;j1++){
		
		 sheetName=testSuite.getPropertyValue("outputFileName"+readRow);
		valHeader =sheetOutput.getCell(j1, startAtRow).getContents().trim();
		//log.error("valHeader"+valHeader);
		
		if(valHeader.indexOf("IG_") != -1){
			try{
			resultCAP=xmlCAPResponse.selectPath("//" +valHeader.substring(3))[0];	
			valCAP=resultCAP.getStringValue();
			ignoreComparision="true"
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}catch(Exception e){
			valCAP=""
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}
		
		}else{
try{	
	//log.info("-----valHeader"+valHeader)
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[0];	
valCAP=resultCAP.getStringValue();
//log.info("*************valCAP"+valCAP)
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}catch(Exception e){
	//log.error("Exception occured "+e.toString())
	valCAP=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}

}
		if(j1==0){
			
			utils.setOutputData(sheetName,testCaseNo,startingRow,j1);
			
		}
	if(j1==1){


	utils.setOutputData(sheetName,"CAP Response",startingRow,j1);
	
		}
		
	if(ignoreComparision== "true"){
		
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);
		ignoreComparision="false"
}
utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);

	if(j1==columnsOutput-1){
		if (soapfaultflagCAP=="true"){		// && soapfaultflagWM=="true"  ){
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+2,true,"RED");
		soapfault++;
		soapfaultflagCAP="false";
		contentCAP=""
		
		}else if(soapfaultflagCAP=="true"){  // || soapfaultflagWM=="true"){
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+3);
		failure++;
		soapfaultflagCAP="false";
		contentCAP=""
			
		}else if(result=="FAIL"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		failure++;
					
		}else{
		
		utils.setOutputData(sheetName,"Pass",startingRow,columnsOutput+2,true,"GREEN");	
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		success++;
		
		}
		
		}


	
	}
				
				}


}

if(env!="CAP"){
			 requestWM.setRequestContent(holderWM.getXml())

			 try{
			WsdlSubmit submitWM = (WsdlSubmit) requestWM.submit( new WsdlSubmitContext(requestWM), false );
			Response responseWM = submitWM.getResponse();
			responseWMContent = responseWM.getContentAsString();
			xmlWMResponse = XmlUtils.createXmlObject( responseWMContent );	
			contentWM=responseWMContent;
			}catch(Exception e){
			contentWM="WM Socket Time Out Endpoint -" +endPointWM ;
			//log.error(contentWM);
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			break;
			}
			if(responseWMContent.indexOf("No service was found")!= -1){
				contentWM="No service was found at WM endpoint-" +endPointWM ;
				//log.error(contentWM);
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
			//log.error(responseWMContent)
			if(responseWMContent.indexOf("errorCode")== -1 && responseWMContent.indexOf(":Fault")!= -1){
				if(responseWMContent.indexOf("<webM:message")!= -1){
				contentWM="SOAP FAULT:"+responseWMContent.substring(responseWMContent.indexOf("<webM:message"),responseWMContent.indexOf("</webM:message>")) ;
				soapfaultflagWM="true"
				}else{
					contentWM=responseWMContent;
					soapfaultflagWM="false"
				}
				//log.error("soapfaultflagWM"+soapfaultflagWM);
				//log.error(contentWM);
				
			}

			sheetOutput = wb.getSheet(testCase.getPropertyValue("outputColumnSheet"))	
			columnsOutput = sheetOutput.getColumns()
			rowsOutput = sheetOutput.getRows()
			testCaseNo= i;
		
			String result="PAAS"
			String ignoreComparision="false"

			for (int i1 =0; i1<rowsOutput; i1++) {	
					

	for (int j1=0 ;j1 < columnsOutput;j1++){
		
		 sheetName=testSuite.getPropertyValue("outputFileName"+readRow);
		valHeader =sheetOutput.getCell(j1, startAtRow).getContents().trim();
	//	log.error("valHeader"+valHeader);
		
		if(valHeader.indexOf("IG_") != -1){
			try{
		resultWM=xmlWMResponse.selectPath("//" +valHeader.substring(3))[0];	
		valWM=resultWM.getStringValue();
		ignoreComparision="true"
		utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}catch(Exception e){
			//log.error("Exception occured "+e.toString())
		//	valCAP=""
			valWM=""
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
			
	
		}
		
				
		}else{

try{	
resultWM=xmlWMResponse.selectPath("//" +valHeader)[0];	
valWM=resultWM.getStringValue();
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}catch(Exception e){
	//log.error("Exception occured "+e.toString())
	valWM=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}




}

		if(j1==0){
			
			utils.setOutputData(sheetName,testCaseNo,startingRow,j1);
			
		}
	if(j1==1){

	utils.setOutputData(sheetName,"WM Response",startingRow,j1);

		
		}
		
	if(ignoreComparision== "true"){
		
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		ignoreComparision="false"
}


utils.setOutputData(sheetName,valWM+"",startingRow,j1+2);
	if(j1==columnsOutput-1){
		if (soapfaultflagWM=="true"){		// && soapfaultflagWM=="true"  ){
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		soapfault++;
		soapfaultflagWM="false";
		contentWM=""
		
		}else if(soapfaultflagWM=="true"){  // || soapfaultflagWM=="true"){
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		failure++;
		soapfaultflagWM="false";
		contentWM=""	
			
		}else if(result=="FAIL"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		failure++;
					
		}else{
		
		utils.setOutputData(sheetName,"Pass",startingRow,columnsOutput+2,true,"GREEN");	
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		success++;
		
		}
		
		}


	
	}
				
				}

		
}		

  }   	
	comResult++
	comResult++
	utils.setOutputData(sheetName,"\r\n\n------- Summary-------- \r\n",comResult++,1);
	//log.info(comResult);
	utils.setOutputData(sheetName,"Total Test Cases- ",comResult,1);
	testRunner.getTestCase().getTestSuite().setPropertyValue("Total Test Cases",totalTestCases+"");
	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+0;
	}else{
	soapUIResponse=soapUIResponse+","+totalTestCases;
	}
	utils.setOutputData(sheetName,totalTestCases,comResult++,2);
	utils.setOutputData(sheetName,"Success",comResult,1,true, "GREEN");
	testRunner.getTestCase().getTestSuite().setPropertyValue("Success",success+"");
	soapUIResponse=soapUIResponse+","+success;
	utils.setOutputData(sheetName,success,comResult++,2);
	utils.setOutputData(sheetName,"SOAP-FAULT",comResult,1,true,"RED");
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-FAULT",soapfault+"");
	soapUIResponse=soapUIResponse+","+soapfault;

	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+testRunner.getTestCase().getTestSuite().getPropertyValue("SOAP-ERROR");
	}else{
	soapUIResponse=soapUIResponse+","+"0";
	}
	
	utils.setOutputData(sheetName,soapfault,comResult++,2);	
	//soapUIResponse=soapUIResponse+","+comResult;
	
	soapUIResponse=soapUIResponse+"::";

	
	
	
	
	
}
}

soapUIResponse=soapUIResponse.substring(0,soapUIResponse.lastIndexOf("::"));
log.info("soapUIResponse for UI ::: "+soapUIResponse);
testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
project.removeInterface( iface );
}

catch(Exception e){
	log.error("Exception occured in main module "+e.toString())
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",e.toString());
	soapUIResponse=testRunner.getTestCase().getTestSuite().getPropertyValue("soapUIResponse");
	soapUIResponse=soapUIResponse+","+e.toString()+", CAE execution error- Refer CAE logs for more details";
	testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
	project.removeInterface( iface );
}




]]></script></con:config></con:testStep><con:properties><con:property><con:name>inputColumnSheet</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputColumnSheet</con:name><con:value>GetWOServiceDetailsRes</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>valCAP10</con:name><con:value>TransactionTimeStamp</con:value></con:property><con:property><con:name>valCAP11</con:name><con:value>OP_AddressLine4</con:value></con:property><con:property><con:name>valCAP12</con:name><con:value>AttributeValue</con:value></con:property><con:property><con:name>valCAP13</con:name><con:value>CustomerTelephone</con:value></con:property><con:property><con:name>valCAP14</con:name><con:value>CustomerEmail</con:value></con:property><con:property><con:name>valCAP15</con:name><con:value>OP_ShippingDate</con:value></con:property><con:property><con:name>valCAP16</con:name><con:value>PrimaryEmailAddress</con:value></con:property><con:property><con:name>valCAP17</con:name><con:value>SecondaryEmailAddress2</con:value></con:property><con:property><con:name>valCAP18</con:name><con:value>SecondaryEmailAddress3</con:value></con:property><con:property><con:name>valCAP19</con:name><con:value>PreferredMethodOfNotificationCode</con:value></con:property><con:property><con:name>valCAP20</con:name><con:value>AuthorizedUser1</con:value></con:property><con:property><con:name>valCAP21</con:name><con:value>AuthorizedUser2</con:value></con:property><con:property><con:name>valCAP22</con:name><con:value>AuthorizedUser3</con:value></con:property><con:property><con:name>valCAP23</con:name><con:value>AuthorizedUser4</con:value></con:property><con:property><con:name>valCAP24</con:name><con:value>AuthorizedUser5</con:value></con:property><con:property><con:name>valCAP25</con:name><con:value>AuthorizedUser6</con:value></con:property><con:property><con:name>valCAP26</con:name><con:value>AuthorizedUser7</con:value></con:property><con:property><con:name>valCAP27</con:name><con:value>AuthorizedUser8</con:value></con:property><con:property><con:name>valCAP28</con:name><con:value>AuthorizedUser9</con:value></con:property><con:property><con:name>valCAP29</con:name><con:value>AuthorizedUser10</con:value></con:property><con:property><con:name>valCAP30</con:name><con:value>CFEFlag</con:value></con:property><con:property><con:name>valCAP31</con:name><con:value>CFECode</con:value></con:property><con:property><con:name>valCAP32</con:name><con:value>CFEReason</con:value></con:property><con:property><con:name>valCAP33</con:name><con:value>EmailValidatedFlag</con:value></con:property><con:property><con:name>valCAP34</con:name><con:value>BillType</con:value></con:property><con:property><con:name>valCAP35</con:name><con:value>InsideWiring</con:value></con:property><con:property><con:name>valCAP36</con:name><con:value>TarCode</con:value></con:property><con:property><con:name>valCAP37</con:name><con:value>UnservicableAddress</con:value></con:property><con:property><con:name>valCAP38</con:name><con:value>PrimaryLocationCode</con:value></con:property><con:property><con:name>valCAP39</con:name><con:value>SecondaryLocationCode</con:value></con:property><con:property><con:name>valCAP40</con:name><con:value>SignalAccess</con:value></con:property><con:property><con:name>valCAP41</con:name><con:value>Headend</con:value></con:property><con:property><con:name>valCAP42</con:name><con:value>Node</con:value></con:property><con:property><con:name>valCAP43</con:name><con:value>HousePrimaryOutlet</con:value></con:property><con:property><con:name>valCAP44</con:name><con:value>HouseAdditionalOutlet</con:value></con:property><con:property><con:name>valCAP45</con:name><con:value>Cabinet</con:value></con:property><con:property><con:name>valCAP46</con:name><con:value>Interactive</con:value></con:property><con:property><con:name>valCAP47</con:name><con:value>Gridid</con:value></con:property><con:property><con:name>valCAP48</con:name><con:value>Latitude</con:value></con:property><con:property><con:name>valCAP49</con:name><con:value>Longitude</con:value></con:property><con:property><con:name>outputFileName2</con:name><con:value>getAgent</con:value></con:property><con:property><con:name>outputFileName3</con:name><con:value>updateAgent</con:value></con:property><con:property><con:name>valCAP50</con:name><con:value>HouseDevelopmentNumber</con:value></con:property><con:property><con:name>valCAP51</con:name><con:value>Elevation</con:value></con:property><con:property><con:name>valCAP52</con:name><con:value>TrunkRoute</con:value></con:property><con:property><con:name>valCAP53</con:name><con:value>Cascade</con:value></con:property><con:property><con:name>valCAP54</con:name><con:value>PowerSupply</con:value></con:property><con:property><con:name>valCAP55</con:name><con:value>Feeder</con:value></con:property><con:property><con:name>valCAP56</con:name><con:value>LineExtn</con:value></con:property><con:property><con:name>valCAP57</con:name><con:value>Addressable</con:value></con:property><con:property><con:name>valCAP58</con:name><con:value>TagNumber</con:value></con:property><con:property><con:name>valCAP59</con:name><con:value>SecondaryTagNumber</con:value></con:property><con:property><con:name>valCAP60</con:name><con:value>TurnHotDate</con:value></con:property><con:property><con:name>valCAP61</con:name><con:value>FirstDropDate</con:value></con:property><con:property><con:name>valCAP62</con:name><con:value>ReplaceDropDate</con:value></con:property><con:property><con:name>valCAP63</con:name><con:value>PreWired</con:value></con:property><con:property><con:name>valCAP64</con:name><con:value>CountyCode</con:value></con:property><con:property><con:name>valCAP65</con:name><con:value>ReplaceOutletDate</con:value></con:property><con:property><con:name>valCAP66</con:name><con:value>CoordinatesRange</con:value></con:property><con:property><con:name>valCAP67</con:name><con:value>CoordinatesTownship</con:value></con:property><con:property><con:name>valCAP70</con:name><con:value>CensusTract</con:value></con:property><con:property><con:name>valCAP71</con:name><con:value>PrismCode</con:value></con:property><con:property><con:name>valCAP72</con:name><con:value>BillingUnit</con:value></con:property><con:property><con:name>valCAP73</con:name><con:value>ProjectNumber</con:value></con:property><con:property><con:name>valCAP74</con:name><con:value>SICCode</con:value></con:property><con:property><con:name>valCAP75</con:name><con:value>SubDefCode</con:value></con:property><con:property><con:name>valCAP76</con:name><con:value>OP_ServiceStatus</con:value></con:property><con:property><con:name>valCAP77</con:name><con:value>OP_USPSSuffixCode</con:value></con:property><con:property><con:name>valCAP78</con:name><con:value>OP_AssociationCode</con:value></con:property><con:property><con:name>valCAP79</con:name><con:value>OP_HouseAmp</con:value></con:property><con:property><con:name>valCAP80</con:name><con:value>OP_RateCenter</con:value></con:property><con:property><con:name>OutputFileName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputFileName1</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>FileName</con:name><con:value>outputFileName1,</con:value></con:property><con:property><con:name>valCAP2</con:name><con:value>SK_Type</con:value></con:property><con:property><con:name>valCAP3</con:name><con:value>SK_Test case description</con:value></con:property><con:property><con:name>valCAP4</con:name><con:value>OP_version</con:value></con:property><con:property><con:name>valCAP5</con:name><con:value>OP_user</con:value></con:property><con:property><con:name>valCAP6</con:name><con:value>clientIdentifier</con:value></con:property><con:property><con:name>valCAP7</con:name><con:value>SiteId</con:value></con:property><con:property><con:name>valCAP8</con:name><con:value>WorkOrderNumber</con:value></con:property><con:property><con:name>valCAP9</con:name><con:value>OP_cus:Name</con:value></con:property><con:property><con:name>outputFileName4</con:name><con:value>deleteAgent</con:value></con:property><con:property><con:name>outputFileName5</con:name><con:value>ValidateDropShip</con:value></con:property><con:property><con:name>outputFileName6</con:name><con:value>GetCstmrCollectionEventInfo</con:value></con:property><con:property><con:name>Total Test Cases</con:name><con:value>1</con:value></con:property><con:property><con:name>Success</con:name><con:value>0</con:value></con:property><con:property><con:name>Failure</con:name><con:value>0</con:value></con:property><con:property><con:name>SOAP-FAULT</con:name><con:value>0</con:value></con:property><con:property><con:name>soapUIResponse</con:name><con:value>getWOServiceDetails,0,0,0,CAP Socket Time Out Endpoint -http://catl0qa425.corp.cox.com:5555/ws/Cox_WorkOrderInquireInterface.pub.wsd.providers.WOServiceDetails.v2:WOServiceDetails/Cox_WorkOrderInquireInterface_pub_wsd_providers_WOServiceDetails_v2_WOServiceDetails_Port</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>creditInformation3_22_16_7_54_PM27_Report.xls</con:value></con:property><con:property><con:name>SOAP-ERROR</con:name><con:value>CAP Socket Time Out Endpoint -http://catl0qa425.corp.cox.com:5555/ws/Cox_WorkOrderInquireInterface.pub.wsd.providers.WOServiceDetails.v2:WOServiceDetails/Cox_WorkOrderInquireInterface_pub_wsd_providers_WOServiceDetails_v2_WOServiceDetails_Port</con:value></con:property><con:property><con:name>operationName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>valCAP0</con:name><con:value>SK_Test case#</con:value></con:property><con:property><con:name>valCAP1</con:name><con:value>SK_Scenario</con:value></con:property><con:property><con:name>outputFileName9</con:name><con:value>getUserByNetworkLoginAndDomain</con:value></con:property></con:properties><con:setupScript>def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String filePath=utils.getFilePath(project, project.getName()+"_Report.xls");
//log.info(filePath)
def f = new File(filePath)
f.delete()</con:setupScript><con:tearDownScript>import java.text.DateFormat
def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String sheetName=testSuite.getPropertyValue("FileName");
String outputFileName=testSuite.getPropertyValue("outputFileName");







//log.info(outputFileName);
String[] sheetNameArray=sheetName.split(",");
def today = new Date()
def plainFormatter = DateFormat.instance
//log.info(plainFormatter.format(today));
def dateString=plainFormatter.format(today)
//log.info(dateString)
dateString=dateString.replaceAll('/','_');
dateString=dateString.replaceAll(' ','_');
dateString=dateString.replaceAll(':','_');
//log.info(dateString)

String ranDomNumber=Math.abs(new Random().nextInt() % 600) + 1 ; 
dateString=dateString+ranDomNumber;
//log.info(dateString)
String opName=testSuite.getPropertyValue("operationName"); 
//String outputFile=project.getName()+ranDomNumber+"_Report.xls"; 
String outputFile=opName+dateString+"_Report.xls";

//log.info(outputFile);

testSuite.setPropertyValue("resultFileName",outputFile);

 String outputFilePath=project.getPropertyValue("outputFilePath");
//String filePath=utils.getFilePath(outputFilePath,outputFile );
String filePath=utils.getFilePath(project,outputFile );
//log.info("********"+filePath);
String fileLocation=outputFilePath+outputFile;
//log.info("********"+fileLocation);
//log.info(utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[0])))
for (i=0;i&lt;sheetNameArray.length;i++)
{
	
	//utils.writeInFile(filePath, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.writeInFile(fileLocation, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.dataCleanUp(testSuite.getPropertyValue(sheetNameArray[i]));
}

//String sheetName=testSuite.getPropertyValue("FileName");

//String sheetName=testSuite.getName();

	//--------------------START Writing in file--------------------
	
	//log.info("filePath: "+filePath+"\n Writing in file.............")
	
	//utils.dataCleanUp(sheetName);
	//utils.dataCleanUp(outputFileName);

log.info("Finished");</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="Comparative Analysis Engine SOAP1" id="8b6041ec-b5f1-44b8-a6c4-cdb40bd2f432"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCaseStep" searchProperties="true" id="6ee165b6-5109-4968-baf7-417b7d2d3a38"><con:settings/><con:testStep type="groovy" name="Perform Validation" id="97872dbc-7814-4ab5-a411-9b2eaab2022e"><con:settings/><con:config><script><![CDATA[import jxl.*
import java.util.*;
import jxl.write.*;
import jxl.write.Boolean;
import jxl.write.Number;
import jxl.write.biff.RowsExceededException;
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.impl.wsdl.WsdlProject
import com.eviware.soapui.impl.wsdl.WsdlInterface
import com.eviware.soapui.impl.WsdlInterfaceFactory
import com.eviware.soapui.impl.wsdl.WsdlOperation
import com.eviware.soapui.impl.wsdl.WsdlRequest
import com.eviware.soapui.impl.wsdl.WsdlSubmit;
import com.eviware.soapui.impl.wsdl.WsdlSubmitContext;
import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.model.iface.Response;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlException;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlOptions;
import com.eviware.soapui.impl.wsdl.actions.iface.RemoveInterfaceAction;

import org.apache.log4j.*;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def projectDir = groovyUtils.projectPath
//log.info(projectDir);
String endPointCAP="";
String endPointWM="";

def project = testRunner.getTestCase().getTestSuite().getProject();
def utils = project.runAfterLoadScript();
def testCase = testRunner.testCase;
WsdlProject wsdlproject = new WsdlProject() 
WsdlInterface iface 
WsdlOperation operation
XmlObject resultWM
XmlObject resultCAP
int startingRow=0;
int endOfRow =1;
int comResult=2; 
int startAtRow  = 0
String testCaseNo
String FileName=""
String sheetName=""
int rowCounter=0;
String operationName=""
String readWSDL="false";
String soapUIResponse="";
try { 
	if(System.getProperty("catalina.base")!=null){
		String logFileName=System.getProperty("catalina.base")+"/logs/soapuiAPI.log";
		String logPattern=  "%d{yyyy-MM-dd HH:mm:ss.SSS} %C %m %n";
		String logFileRollup=  ".yyyy-MM-dd";
		//String logLevel=  context.expand( '${#Project#LOG_LEVEL}' )
		Layout layout = new PatternLayout(logPattern);
		DailyRollingFileAppender appender;
		try{
			appender = new DailyRollingFileAppender(layout, logFileName,logFileRollup);
			log = Logger.getRootLogger();
			log.setLevel((Level) Level.DEBUG);					
			log.addAppender(appender);
		}
		catch (IOException e){
			e.printStackTrace();
			log.error("Exception - "+e);
		}
	}
def testSuite = testRunner.getTestCase().getTestSuite()
//def wsdlName = context.expand( '${#Project#wsdlName}');
def wsdlName = project.getPropertyValue("wsdlName");
log.info("wsdlName::"+wsdlName);
//def dataSheetName = context.expand( '${#Project#dataSheetName}');
def dataSheetName = project.getPropertyValue("dataSheetName");
def opName=  project.getPropertyValue("operationName");
testSuite.setPropertyValue("operationName",opName); 
def outputFilePath=project.getPropertyValue("outputFilePath");
//log.info(wsdlName);
//log.info(dataSheetName)
//File fp = new File(projectDir+"/"+dataSheetName) 	
File fp = new File(outputFilePath+dataSheetName) 	
	//log.info(fp)	
	wb = Workbook.getWorkbook(fp)
	Endpoint = wb.getSheet("Endpoint")
	countRows = Endpoint.getRows()
	countColumns=Endpoint.getColumns()
	def  readEndpoints = new String[countRows];
	
	int r=0;
			for (int readRow=1 ;readRow < countRows;readRow++){
			//log.info(Endpoint.getCell(0, readRow).getContents().trim())
			
			if(Endpoint.getCell(0, readRow).getContents().trim()=='run'){
				
			for (int j=0 ;j < countColumns;j++){
				
				readEndpoints[readRow]=Endpoint.getCell(0, readRow).getContents().trim()	
				
				if(readEndpoints[readRow]=='run'){
					j++;
					//log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					if(readWSDL == "false"){
						//log.info(project)
						//log.info(projectDir)
						//log.info(Endpoint.getCell(j, readRow).getContents().trim())
						//log.info(projectDir+"/"+wsdlName)
						
					//iface= WsdlInterfaceFactory.importWsdl(project, projectDir+"/"+wsdlName, true )[0]
					String wsdlURL= Endpoint.getCell(1, readRow).getContents().trim();
					if(wsdlURL.indexOf("/")>=0){
						log.info("creating WsdlInterface......."+wsdlURL);
						iface= WsdlInterfaceFactory.importWsdl(project, wsdlURL, true )[0]
					}else{
						log.info("creating WsdlInterface.......");
						iface= WsdlInterfaceFactory.importWsdl(project, outputFilePath+"/"+wsdlName, true )[0]
					}
					 //log.info(2)
					 readWSDL="true";
					}
					//log.info("-----"+Endpoint.getCell(j, readRow).getContents().trim());
					testSuite.setPropertyValue("OutputFileName",Endpoint.getCell(j, readRow).getContents().trim().substring(0,Endpoint.getCell(j, readRow).getContents().trim().indexOf(".")));
				
					j++;
					operationName=Endpoint.getCell(j, readRow).getContents().trim();
					//log.info(operationName)
					soapUIResponse=soapUIResponse+operationName;
					testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse+",0,0,0");
					operation = (WsdlOperation) iface.getOperationByName(operationName) 
					//log.info(" operation -  "+operationName)
					j++;
					testCase.setPropertyValue("inputColumnSheet", Endpoint.getCell(j,readRow).getContents().trim());
					testSuite.setPropertyValue("outputFileName"+readRow, Endpoint.getCell(j,readRow).getContents().trim());
					FileName=FileName.concat("outputFileName"+readRow+",");
					testSuite.setPropertyValue("FileName",FileName);
					
					j++;
					testCase.setPropertyValue("outputColumnSheet", Endpoint.getCell(j, readRow).getContents().trim());
					j++;
					endPointWM=Endpoint.getCell(j, readRow).getContents().trim()
					j++;
					endPointCAP=Endpoint.getCell(j,readRow).getContents().trim()	
				
					if((project.getPropertyValue("endpoint1") != null)){
						endPointCAP=project.getPropertyValue("endpoint1");
					}

						if(project.getPropertyValue("endpoint2") != null){
						endPointWM=project.getPropertyValue("endpoint2");
					}
						log.info("endPointCAP--"+endPointCAP)
						log.info("endPointWM--"+endPointWM)
					
						}
				
				}
		
			
			


	int row= 0;
	
	sheet = wb.getSheet(testCase.getPropertyValue("inputColumnSheet"))
	columns = sheet.getColumns()
	rows = sheet.getRows()
	columns=sheet.getColumns()
	int startAtColumn = 0
	int totalTestCases=rows - 1;
	int success=0;
	int failure=0;	
	int soapfault=0;
	String soapfaultflagCAP="false"
	String soapfaultflagWM="false"
	startAtRow  = 0
	testCaseNo=0
	String contentCAP
	String contentWM
	String unretrybleError="false"
	String filterList="";
	
	def  valCAP	= new String[columns];

	
for (int j=0 ;j < columns;j++)
	{
		valCAP[j]=sheet.getCell(j, 0).getContents().trim()
		testSuite.setPropertyValue("valCAP"+j, sheet.getCell(j, startAtRow).getContents().trim());
		//log.info(sheet.getCell(j, startAtRow).getContents().trim())
         if(sheet.getCell(j, startAtRow).getContents().trim().indexOf("SK_") != -1){
                                                filterList=filterList + ","+j;
                                }

	}
	int countRow=1;	

for (int i =1; i<rows; i++)
	{
			if(i==1){
			success=0;
			failure=0;
			soapfault=0;
			startingRow=1;
			endOfRow =2;
			comResult=3; 
			}else{
			startingRow=startingRow+3;
			endOfRow=endOfRow+3;
			comResult=comResult+3;	
			}
			log.info("Excecuting Test case# "+i);
			//log.info("----------------------------"+startingRow);
			WsdlRequest requestCAP = operation.addNewRequest("requestCAP") 
			def capRequest = operation.createRequest(true) 
			requestCAP.setRequestContent(capRequest) ;
			requestCAP.setEndpoint(endPointCAP);
			//requestCAP.submit(new WsdlSubmitContext(requestCAP),false)
			def holderCAP = new XmlHolder(capRequest)

			
			WsdlRequest requestWM = operation.addNewRequest("requestWM") 
			def wmRequest = operation.createRequest(true) 
			requestWM.setRequestContent(wmRequest) ;
			requestWM.setEndpoint(endPointWM);
			def holderWM = new XmlHolder(wmRequest)
		
		
		for (int j=0 ;j < columns;j++)
		 	{
                             if( filterList.indexOf(j+"") != -1){
                                                   continue;
                                                            }

		 		//log.info(testSuite.getPropertyValue("valCAP"+j))
		 		
		 		if ( testSuite.getPropertyValue("valCAP"+j).indexOf("OP_").equals(-1)){
		 		//log.info(testSuite.getPropertyValue("valCAP"+j).indexOf("OP_"))
				holderCAP.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
				holderWM.setNodeValue( "//"+testSuite.getPropertyValue("valCAP"+j), sheet.getCell(j, i).getContents().trim())
			
			}else{
				
				
				String removeVal=testSuite.getPropertyValue("valCAP"+j).substring(3);
				//log.info("removing optional node ---"+removeVal)
				//log.info(holderCAP.containsKey(removeVal))
				
				holderCAP.removeDomNodes("//"+removeVal) 
				holderWM.removeDomNodes("//"+removeVal) 
			
			}
		 	}

			requestCAP.setRequestContent(holderCAP.getXml())
			String responseCAPContent
			String responseWMContent
			String content
			 XmlObject xmlWMResponse
			 XmlObject xmlCAPResponse


				try{
			WsdlSubmit submitCAP = (WsdlSubmit) requestCAP.submit( new WsdlSubmitContext(requestCAP), false );
			Response responseCAP = submitCAP.getResponse();
			responseCAPContent= responseCAP.getContentAsString();
			 xmlCAPResponse = XmlUtils.createXmlObject( responseCAPContent );
			 contentCAP=responseCAPContent;
			}catch(Exception e){
			contentCAP="CAP Socket Time Out Endpoint -" +endPointCAP ;
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			//log.error(contentCAP);
			break;
			}
			if(responseCAPContent.indexOf("No service was found")!= -1){
				contentCAP="No service was found at CAP endpoint -" +endPointCAP ;
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentCAP);
				//log.error(contentCAP);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
			//log.error("responseCAPContent"+responseCAPContent)
			if(responseCAPContent.indexOf("errorCode")== -1 && responseCAPContent.indexOf(":Fault")!= -1){
				
			if(responseCAPContent.indexOf("<soap:Text")!= -1 || responseCAPContent.indexOf("faultcode")!= -1){
				
				if(responseCAPContent.indexOf("<soap:Text")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("<soap:Text"),responseCAPContent.indexOf("</soap:Text>")) ;
				}else if(responseCAPContent.indexOf("<soap:Fault")!= -1 ){
					
				contentCAP="SOAP FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soap:Fault"),responseCAPContent.indexOf("</soap:Fault>")) ;	
				}else if(responseCAPContent.indexOf("<soapenv:Fault")!= -1 ){

				contentCAP="SOAP ENV FAULT:"+responseCAPContent.substring(responseCAPContent.indexOf("soapenv:Fault"),responseCAPContent.indexOf("</soapenv:Fault>")) ;	
				}
				soapfaultflagCAP="true"
			}else{
				
				contentCAP="SOAP FAULT:"+responseCAPContent ;
				soapfaultflagCAP="false"
			}
				
				//log.error("soapfaultflagCAP"+soapfaultflagCAP);
				//log.error(contentCAP);
				
				
			}
			 requestWM.setRequestContent(holderWM.getXml())

			 try{
			WsdlSubmit submitWM = (WsdlSubmit) requestWM.submit( new WsdlSubmitContext(requestWM), false );
			Response responseWM = submitWM.getResponse();
			responseWMContent = responseWM.getContentAsString();
			xmlWMResponse = XmlUtils.createXmlObject( responseWMContent );	
			contentWM=responseWMContent;
			}catch(Exception e){
			contentWM="WM Socket Time Out Endpoint -" +endPointWM ;
			//log.error(contentWM);
			testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
			i=rows;
			readRow=countRows;
			unretrybleError="true";
			break;
			}
			if(responseWMContent.indexOf("No service was found")!= -1){
				contentWM="No service was found at WM endpoint-" +endPointWM ;
				//log.error(contentWM);
				testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",contentWM);
				i=rows;
				readRow=countRows;
				unretrybleError="true";
				break;
			}
		//	log.error("responseWMContent"+responseWMContent)
			if(responseWMContent.indexOf("errorCode")== -1 && responseWMContent.indexOf(":Fault")!= -1){
				if(responseWMContent.indexOf("<webM:message")!= -1){
				contentWM="SOAP FAULT:"+responseWMContent.substring(responseWMContent.indexOf("<webM:message"),responseWMContent.indexOf("</webM:message>")) ;
				soapfaultflagWM="true"
				}else{
					contentWM=responseWMContent;
					soapfaultflagWM="false"
				}
				//log.error("soapfaultflagWM"+soapfaultflagWM);
				//log.error(contentWM);
				
			}
			
			
		
			sheetOutput = wb.getSheet(testCase.getPropertyValue("outputColumnSheet"))	
			columnsOutput = sheetOutput.getColumns()
			rowsOutput = sheetOutput.getRows()
			testCaseNo= i;
		
			String result="PAAS"
			String ignoreComparision="false"

			for (int i1 =0; i1<rowsOutput; i1++) {	
					

	for (int j1=0 ;j1 < columnsOutput;j1++){
		
		 sheetName=testSuite.getPropertyValue("outputFileName"+readRow);
		valHeader =sheetOutput.getCell(j1, startAtRow).getContents().trim();
		//log.error("valHeader"+valHeader);
		
		if(valHeader.indexOf("IG_") != -1){
			try{
			resultWM=xmlWMResponse.selectPath("//" +valHeader.substring(3))[0];	
		valWM=resultWM.getStringValue();
		resultCAP=xmlCAPResponse.selectPath("//" +valHeader.substring(3))[0];	
		valCAP=resultCAP.getStringValue();
		ignoreComparision="true"
		utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
		}catch(Exception e){
			//log.error("Exception occured "+e.toString())
			valCAP=""
			valWM=""
			utils.setOutputData(sheetName,valHeader.substring(3)+"",startAtRow,j1+2,true,"ORANGE");
			
	
		}
		
				
		}else{
try{	
//	log.error("*************"+valHeader);
valWM="";
//log.info("resultWM"+valWM);
 XmlCursor cursor = xmlWMResponse.newCursor();	
   cursor.selectPath("//" +valHeader);
//log.error("*****cursor********"+cursor.getSelectionCount());
//log.error("*****cursor value********"+cursor.getTextValue());

if(cursor.getSelectionCount()==1){
resultWM=xmlWMResponse.selectPath("//" +valHeader)[0];	
valWM=resultWM.getStringValue();
//valWM=valWM.replaceAll("\\s","");
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}else{
for(int j=0 ; j<cursor.getSelectionCount();j++){ 
resultWM=xmlWMResponse.selectPath("//" +valHeader)[j];	
valWM=valWM+"#"+resultWM.getStringValue();	
//valWM=cursor.getTextValue();o
//log.info("&&&&&&&&&&&&&&&&&valWM"+valWM)
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
//log.info("****VAL2*********"+xmlWMResponse.selectPath("//" +valHeader)[1]);
//	log.error("@@@@@@@@@@@@@@@@@@"+xmlWMResponse.selectPath("//" +valHeader)[0]);   //OfferNameList/OfferName')
/*
for(int countWM=0 ; countWM <= cursor.getSelectionCount() ; countWM++){
utils.setOutputData(sheetName,cursor.selectPath("//" +valHeader)[countWM],startAtRow,j1+2);
}
*/
}
}
}catch(Exception e){
	//log.error("Exception occured ****"+e.toString())
	valWM=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}

try{
valCAP="";
XmlCursor cursor = xmlCAPResponse.newCursor();	
   cursor.selectPath("//" +valHeader);
//log.error("*****cursor********"+cursor.getSelectionCount());
//log.error("*****cursor value********"+cursor.getTextValue());

if(cursor.getSelectionCount()==1){
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[0];	
valCAP=resultCAP.getStringValue();
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
}else{
	
for(int j=0 ; j<cursor.getSelectionCount();j++){ 
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[j];	
valCAP=valCAP+"#"+resultCAP.getStringValue();
//log.info("&&&&&&&&&&&&&&&&&valCAP"+valCAP)
utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
//log.info("****VAL2*********"+xmlWMResponse.selectPath("//" +valHeader)[1]);
//	log.error("@@@@@@@@@@@@@@@@@@"+xmlWMResponse.selectPath("//" +valHeader)[0]);   //OfferNameList/OfferName')
/*
for(int countWM=0 ; countWM <= cursor.getSelectionCount() ; countWM++){
utils.setOutputData(sheetName,cursor.selectPath("//" +valHeader)[countWM],startAtRow,j1+2);
}
*/
}

/*
resultCAP=xmlCAPResponse.selectPath("//" +valHeader)[0];	
valCAP=resultCAP.getStringValue();

 utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
 */
}
}catch(Exception e){
	//log.error("Exception occured "+e.toString())
	valCAP=""
	utils.setOutputData(sheetName,valHeader+"",startAtRow,j1+2);
	
}





}


		if(j1==0){
			
			utils.setOutputData(sheetName,testCaseNo,startingRow,j1);
			
		
			
		}
	if(j1==1){
		
			utils.setOutputData(sheetName,"CAP Response",startingRow,j1);
			utils.setOutputData(sheetName,"WM Response",endOfRow,j1);
		
		}
		
	if(ignoreComparision== "true"){
		
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		utils.setOutputData(sheetName,"",comResult,j1+2);
		ignoreComparision="false"
}else{
		if(valCAP == valWM){
		//log.info("*************1****************"+valCAP +"startingRow"+startingRow +"****"+(j1+2))
		//log.info("***********1******************"+valWM+"endOfRow"+endOfRow)
		//log.info("***********1******************"+comResult)
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2);
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		utils.setOutputData(sheetName,"",comResult,j1+2);
		
		}else{
			
		result="FAIL"
		utils.setOutputData(sheetName,valCAP+"",startingRow,j1+2,true,"RED");
		utils.setOutputData(sheetName,valWM+"",endOfRow,j1+2);
		utils.setOutputData(sheetName,"",comResult,j1+2);
			
		
		}
}

	if(j1==columnsOutput-1){
			
		if (soapfaultflagCAP=="true" && soapfaultflagWM=="true"  ){
		//utils.setOutputData(sheetName,"SOAP FAULT",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		soapfault++;
		soapfaultflagCAP="false";
		soapfaultflagWM="false";
		contentCAP=""
		contentWM=""
		
		}else if(soapfaultflagCAP=="true" || soapfaultflagWM=="true"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,contentCAP,startingRow,columnsOutput+3);
		utils.setOutputData(sheetName,contentWM,endOfRow,columnsOutput+2,true,"RED");
		failure++;
		soapfaultflagCAP="false";
		soapfaultflagWM="false";
		contentCAP=""
		contentWM=""	
			
		}else if(result=="FAIL"){
			
		utils.setOutputData(sheetName,"Failed",startingRow,columnsOutput+2,true,"RED");
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		failure++;
					
		}else{
			
		utils.setOutputData(sheetName,"Pass",startingRow,columnsOutput+2,true,"GREEN");	
		utils.setOutputData(sheetName,"",endOfRow,columnsOutput+2);
		success++;
	
		}
	
		}


	
	}

				}


	
		

		
  } 
	  	
	comResult++
	comResult++
	utils.setOutputData(sheetName,"\r\n\n------- Summary-------- \r\n",comResult++,1);
	
	utils.setOutputData(sheetName,"Total Test Cases- ",comResult,1);
	testRunner.getTestCase().getTestSuite().setPropertyValue("Total Test Cases",totalTestCases+"");
	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+0;
	}else{
	soapUIResponse=soapUIResponse+","+totalTestCases;
	}
	utils.setOutputData(sheetName,totalTestCases,comResult++,2);
	utils.setOutputData(sheetName,"Success",comResult,1,true, "GREEN");
	testRunner.getTestCase().getTestSuite().setPropertyValue("Success",success+"");
	soapUIResponse=soapUIResponse+","+success;
	utils.setOutputData(sheetName,success,comResult++,2);
	utils.setOutputData(sheetName,"Failure",comResult,1,true,"RED");
	testRunner.getTestCase().getTestSuite().setPropertyValue("Failure",failure+"");
	soapUIResponse=soapUIResponse+","+failure;
	utils.setOutputData(sheetName,failure,comResult++,2);
	utils.setOutputData(sheetName,"SOAP-FAULT",comResult,1,true,"RED");
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-FAULT",soapfault+"");
	soapUIResponse=soapUIResponse+","+soapfault;

	if(unretrybleError == "true"){
		soapUIResponse=soapUIResponse+","+testRunner.getTestCase().getTestSuite().getPropertyValue("SOAP-ERROR");
	}else{
	soapUIResponse=soapUIResponse+","+"0";
	}
	
	utils.setOutputData(sheetName,soapfault,comResult++,2);	
	//soapUIResponse=soapUIResponse+","+comResult;
	
	soapUIResponse=soapUIResponse+"::";

	
	
	
	
	
}
}

soapUIResponse=soapUIResponse.substring(0,soapUIResponse.lastIndexOf("::"));
log.info("soapUIResponse for UI ::: "+soapUIResponse);
testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
project.removeInterface( iface );
}

catch(Exception e){
	log.error("Exception occured in main module "+e.toString())
	testRunner.getTestCase().getTestSuite().setPropertyValue("SOAP-ERROR",e.toString());
	soapUIResponse=testRunner.getTestCase().getTestSuite().getPropertyValue("soapUIResponse");
	soapUIResponse=soapUIResponse+","+e.toString()+", CAE execution error- Refer CAE logs for more details";
	testRunner.getTestCase().getTestSuite().setPropertyValue("soapUIResponse",soapUIResponse);
	project.removeInterface( iface );
}




]]></script></con:config></con:testStep><con:properties><con:property><con:name>inputColumnSheet</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputColumnSheet</con:name><con:value>GetWOServiceDetailsRes</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>valCAP10</con:name><con:value>OP_AddressLine3</con:value></con:property><con:property><con:name>valCAP11</con:name><con:value>OP_AddressLine4</con:value></con:property><con:property><con:name>valCAP12</con:name><con:value>AttributeValue</con:value></con:property><con:property><con:name>valCAP13</con:name><con:value>CustomerTelephone</con:value></con:property><con:property><con:name>valCAP14</con:name><con:value>CustomerEmail</con:value></con:property><con:property><con:name>valCAP15</con:name><con:value>OP_ShippingDate</con:value></con:property><con:property><con:name>valCAP16</con:name><con:value>PrimaryEmailAddress</con:value></con:property><con:property><con:name>valCAP17</con:name><con:value>SecondaryEmailAddress2</con:value></con:property><con:property><con:name>valCAP18</con:name><con:value>SecondaryEmailAddress3</con:value></con:property><con:property><con:name>valCAP19</con:name><con:value>PreferredMethodOfNotificationCode</con:value></con:property><con:property><con:name>valCAP20</con:name><con:value>AuthorizedUser1</con:value></con:property><con:property><con:name>valCAP21</con:name><con:value>AuthorizedUser2</con:value></con:property><con:property><con:name>valCAP22</con:name><con:value>AuthorizedUser3</con:value></con:property><con:property><con:name>valCAP23</con:name><con:value>AuthorizedUser4</con:value></con:property><con:property><con:name>valCAP24</con:name><con:value>AuthorizedUser5</con:value></con:property><con:property><con:name>valCAP25</con:name><con:value>AuthorizedUser6</con:value></con:property><con:property><con:name>valCAP26</con:name><con:value>AuthorizedUser7</con:value></con:property><con:property><con:name>valCAP27</con:name><con:value>AuthorizedUser8</con:value></con:property><con:property><con:name>valCAP28</con:name><con:value>AuthorizedUser9</con:value></con:property><con:property><con:name>valCAP29</con:name><con:value>AuthorizedUser10</con:value></con:property><con:property><con:name>valCAP30</con:name><con:value>CFEFlag</con:value></con:property><con:property><con:name>valCAP31</con:name><con:value>CFECode</con:value></con:property><con:property><con:name>valCAP32</con:name><con:value>CFEReason</con:value></con:property><con:property><con:name>valCAP33</con:name><con:value>EmailValidatedFlag</con:value></con:property><con:property><con:name>valCAP34</con:name><con:value>BillType</con:value></con:property><con:property><con:name>valCAP35</con:name><con:value>InsideWiring</con:value></con:property><con:property><con:name>valCAP36</con:name><con:value>TarCode</con:value></con:property><con:property><con:name>valCAP37</con:name><con:value>UnservicableAddress</con:value></con:property><con:property><con:name>valCAP38</con:name><con:value>PrimaryLocationCode</con:value></con:property><con:property><con:name>valCAP39</con:name><con:value>SecondaryLocationCode</con:value></con:property><con:property><con:name>valCAP40</con:name><con:value>SignalAccess</con:value></con:property><con:property><con:name>valCAP41</con:name><con:value>Headend</con:value></con:property><con:property><con:name>valCAP42</con:name><con:value>Node</con:value></con:property><con:property><con:name>valCAP43</con:name><con:value>HousePrimaryOutlet</con:value></con:property><con:property><con:name>valCAP44</con:name><con:value>HouseAdditionalOutlet</con:value></con:property><con:property><con:name>valCAP45</con:name><con:value>Cabinet</con:value></con:property><con:property><con:name>valCAP46</con:name><con:value>Interactive</con:value></con:property><con:property><con:name>valCAP47</con:name><con:value>Gridid</con:value></con:property><con:property><con:name>valCAP48</con:name><con:value>Latitude</con:value></con:property><con:property><con:name>valCAP49</con:name><con:value>Longitude</con:value></con:property><con:property><con:name>outputFileName2</con:name><con:value>GetCustomerAccountByACNO</con:value></con:property><con:property><con:name>outputFileName3</con:name><con:value>DeleteCustomerBilling</con:value></con:property><con:property><con:name>valCAP50</con:name><con:value>HouseDevelopmentNumber</con:value></con:property><con:property><con:name>valCAP51</con:name><con:value>Elevation</con:value></con:property><con:property><con:name>valCAP52</con:name><con:value>TrunkRoute</con:value></con:property><con:property><con:name>valCAP53</con:name><con:value>Cascade</con:value></con:property><con:property><con:name>valCAP54</con:name><con:value>PowerSupply</con:value></con:property><con:property><con:name>valCAP55</con:name><con:value>Feeder</con:value></con:property><con:property><con:name>valCAP56</con:name><con:value>LineExtn</con:value></con:property><con:property><con:name>valCAP57</con:name><con:value>Addressable</con:value></con:property><con:property><con:name>valCAP58</con:name><con:value>TagNumber</con:value></con:property><con:property><con:name>valCAP59</con:name><con:value>SecondaryTagNumber</con:value></con:property><con:property><con:name>valCAP60</con:name><con:value>TurnHotDate</con:value></con:property><con:property><con:name>valCAP61</con:name><con:value>FirstDropDate</con:value></con:property><con:property><con:name>valCAP62</con:name><con:value>ReplaceDropDate</con:value></con:property><con:property><con:name>valCAP63</con:name><con:value>PreWired</con:value></con:property><con:property><con:name>valCAP64</con:name><con:value>CountyCode</con:value></con:property><con:property><con:name>valCAP65</con:name><con:value>ReplaceOutletDate</con:value></con:property><con:property><con:name>valCAP66</con:name><con:value>CoordinatesRange</con:value></con:property><con:property><con:name>valCAP67</con:name><con:value>CoordinatesTownship</con:value></con:property><con:property><con:name>valCAP70</con:name><con:value>CensusTract</con:value></con:property><con:property><con:name>valCAP71</con:name><con:value>PrismCode</con:value></con:property><con:property><con:name>valCAP72</con:name><con:value>BillingUnit</con:value></con:property><con:property><con:name>valCAP73</con:name><con:value>ProjectNumber</con:value></con:property><con:property><con:name>valCAP74</con:name><con:value>SICCode</con:value></con:property><con:property><con:name>valCAP75</con:name><con:value>SubDefCode</con:value></con:property><con:property><con:name>valCAP76</con:name><con:value>OP_ServiceStatus</con:value></con:property><con:property><con:name>valCAP77</con:name><con:value>OP_USPSSuffixCode</con:value></con:property><con:property><con:name>valCAP78</con:name><con:value>OP_AssociationCode</con:value></con:property><con:property><con:name>valCAP79</con:name><con:value>OP_HouseAmp</con:value></con:property><con:property><con:name>valCAP80</con:name><con:value>OP_RateCenter</con:value></con:property><con:property><con:name>OutputFileName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>outputFileName1</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>FileName</con:name><con:value>outputFileName1,</con:value></con:property><con:property><con:name>valCAP2</con:name><con:value>SK_Type</con:value></con:property><con:property><con:name>valCAP3</con:name><con:value>SK_Test case description</con:value></con:property><con:property><con:name>valCAP4</con:name><con:value>OP_version</con:value></con:property><con:property><con:name>valCAP5</con:name><con:value>OP_user</con:value></con:property><con:property><con:name>valCAP6</con:name><con:value>clientIdentifier</con:value></con:property><con:property><con:name>valCAP7</con:name><con:value>SiteId</con:value></con:property><con:property><con:name>valCAP8</con:name><con:value>WorkOrderNumber</con:value></con:property><con:property><con:name>valCAP9</con:name><con:value>OP_cus:Name</con:value></con:property><con:property><con:name>outputFileName4</con:name><con:value>deleteAgent</con:value></con:property><con:property><con:name>outputFileName5</con:name><con:value>ValidateDropShip</con:value></con:property><con:property><con:name>outputFileName6</con:name><con:value>GetCstmrCollectionEventInfo</con:value></con:property><con:property><con:name>Total Test Cases</con:name><con:value>1</con:value></con:property><con:property><con:name>Success</con:name><con:value>1</con:value></con:property><con:property><con:name>Failure</con:name><con:value>0</con:value></con:property><con:property><con:name>SOAP-FAULT</con:name><con:value>0</con:value></con:property><con:property><con:name>soapUIResponse</con:name><con:value>getWOServiceDetails,1,1,0,0,0</con:value></con:property><con:property><con:name>resultFileName</con:name><con:value>GetWOServiceDetails4_12_16_9_14_PM314_Report.xls</con:value></con:property><con:property><con:name>SOAP-ERROR</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>operationName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>valCAP0</con:name><con:value>SK_Test case#</con:value></con:property><con:property><con:name>valCAP1</con:name><con:value>SK_Scenario</con:value></con:property><con:property><con:name>outputFileName9</con:name><con:value>getUserByNetworkLoginAndDomain</con:value></con:property></con:properties><con:setupScript>def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String filePath=utils.getFilePath(project, project.getName()+"_Report.xls");
//log.info(filePath)
def f = new File(filePath)
f.delete()</con:setupScript><con:tearDownScript><![CDATA[import java.text.DateFormat
def project = testSuite.getProject();
def utils = project.runAfterLoadScript();
String sheetName=testSuite.getPropertyValue("FileName");
String outputFileName=testSuite.getPropertyValue("outputFileName");



//log.info("outputFileName****"+outputFileName);
String[] sheetNameArray=sheetName.split(",");
def today = new Date()
def plainFormatter = DateFormat.instance
//log.info(plainFormatter.format(today));
def dateString=plainFormatter.format(today)
//log.info(dateString)
dateString=dateString.replaceAll('/','_');
dateString=dateString.replaceAll(' ','_');
dateString=dateString.replaceAll(':','_');
//log.info(dateString)

String ranDomNumber=Math.abs(new Random().nextInt() % 600) + 1 ; 
dateString=dateString+ranDomNumber;
//log.info(dateString)
String opName=testSuite.getPropertyValue("operationName"); 
//String outputFile=project.getName()+ranDomNumber+"_Report.xls"; 
String outputFile=opName+dateString+"_Report.xls";

//log.info("****"+outputFile);

testSuite.setPropertyValue("resultFileName",outputFile);

 String outputFilePath=project.getPropertyValue("outputFilePath");
//String filePath=utils.getFilePath(outputFilePath,outputFile );
String filePath=utils.getFilePath(project,outputFile );
//log.info("********"+outputFilePath);
String fileLocation=outputFilePath+outputFile;

String soapError=testSuite.getPropertyValue("SOAP-ERROR");
//log.error("soapError"+soapError);
if (soapError == null){

def fileSubStr = outputFileName

//List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /GetWOServiceDetails\.xls$/ }
List<File> files = new File(outputFilePath).listFiles().findAll { it.name =~ /${outputFileName}/ }
//log.info("********"+files.size());

 File archieveDir = new File(outputFilePath +"//archive");

// Tests whether the directory denoted by this abstract pathname exists.
      boolean exists = archieveDir.exists();

     // log.error(exists)
if(exists == false){
	archieveDir.mkdir();
}


for (int i=0 ; i < files.size();i++){
    		//log.info("&&&&&&-"+files.get(i))
    		if(files[i].getName().indexOf(".xls") != -1){
    	   if(files[i].renameTo(new File(outputFilePath +"\\archive\\" + files[i].getName()))){
    		//log.info("File is moved successful!");
    	   }else{
    		//log.info("File is failed to move!");
    	   }
    		}else{
    			i++;
    		}
}    

//log.info("********"+fileLocation);
//log.info(utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[0])))
for (i=0;i<sheetNameArray.length;i++)
{
	
	//utils.writeInFile(filePath, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.writeInFile(fileLocation, testSuite.getPropertyValue(sheetNameArray[i]), utils.getOutputList(testSuite.getPropertyValue(sheetNameArray[i])));
	utils.dataCleanUp(testSuite.getPropertyValue(sheetNameArray[i]));
}
}
//String sheetName=testSuite.getPropertyValue("FileName");

//String sheetName=testSuite.getName();

	//--------------------START Writing in file--------------------
	
	//log.info("filePath: "+filePath+"\n Writing in file.............")
	
	//utils.dataCleanUp(sheetName);
	//utils.dataCleanUp(outputFileName);
project.setPropertyValue("endpoint1",null)
project.setPropertyValue("endpoint2",null) 
testSuite.setPropertyValue("SOAP-ERROR",null);
log.info("Finished");]]></con:tearDownScript><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>wsdlName</con:name><con:value>GetWOServiceDetails.wsdl</con:value></con:property><con:property><con:name>dataSheetName</con:name><con:value>orders.xls</con:value></con:property><con:property><con:name>operationName</con:name><con:value>GetWOServiceDetails</con:value></con:property><con:property><con:name>env</con:name><con:value>CAP</con:value></con:property><con:property><con:name>outputFilePath</con:name><con:value>D:/ROUGH/soapuiapiUploadFiles/REST/reports/</con:value></con:property><con:property><con:name>uploadFileLocation</con:name><con:value>D:/ROUGH/soapuiapiUploadFiles/REST/</con:value></con:property><con:property><con:name>endpoint1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>endpoint2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>responseType</con:name><con:value>WM,CAP</con:value></con:property></con:properties><con:afterLoadScript>import java.util.*;
import jxl.*;
import jxl.write.*;
import java.util.StringTokenizer;
import groovy.sql.Sql;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

//def project = testRunner.getTestCase().getTestSuite().getProject();
//def utils = project.runAfterLoadScript();

return Utils.getInstance();

public class Utils {
	private static Utils utils = null;
	private static LinkedHashMap outputMap = new LinkedHashMap();

	public static Utils getInstance(){
		if(utils == null)
			utils = new Utils();
		return utils;
	}
	public Utils(){
		outputMap = new LinkedHashMap();
	}

	public static String copyFileToNewFile(String destFilePath, String sourceFileUrl) throws IOException {
		//logger.info("destFilePath:       " + destFilePath);
		//logger.info("sourceFileUrl: " + sourceFileUrl);
		String fileName=sourceFileUrl.substring(sourceFileUrl.lastIndexOf("/")+1,sourceFileUrl.lastIndexOf("."));
		
		UUID uuid = UUID.randomUUID(); 
        String randomUUIDString = uuid.toString();
        String destFileName = fileName+"_"+randomUUIDString+"_Report.xls";
        String destFileUrl = destFilePath+destFileName;
        
        //logger.info("destFileUrl:   " + destFileUrl);
                
		File srcFile = new File(sourceFileUrl); 
		File destFile = new File(destFileUrl); 
		if(!destFile.exists())
			destFile.createNewFile();
		InputStream input = null; 
		OutputStream out = null; 
		try { 
		    input = new FileInputStream(srcFile); 
		    out = new FileOutputStream(destFile); 
		 
		    byte[] buf = new byte[1024]; 
		    int len; 
		    while ((len = input.read(buf)) > 0) { 
		        out.write(buf, 0, len); 
		    } 
		} finally { 
		    if (out != null) { 
		        out.close(); 
		    } 
		    if (input != null) { 
		        input.close(); 
		    } 
		} 		
		return destFileName;
	}
	
	public synchronized void setOutputData(String keySheetName, Object value, int row, int column){
		if(outputMap==null)
			outputMap = new LinkedHashMap();

		OutputData outputData=(OutputData) outputMap.get(keySheetName);
		if(outputData==null){
			outputData=new OutputData();
		}
		outputData.setOutputData(value, row, column);
		outputMap.put(keySheetName, outputData);
	}

	public synchronized void setOutputData(String keySheetName, Object value, int row, int column, boolean color, String colorVal){
		if(outputMap==null)
			outputMap = new LinkedHashMap();

		OutputData outputData=(OutputData) outputMap.get(keySheetName);
		if(outputData==null){
			outputData=new OutputData();
		}
		outputData.setOutputData(value, row, column, color, colorVal);
		
		outputMap.put(keySheetName, outputData);
	}
	
	public OutputData getOutputData(String keySheetName){
		return (OutputData) outputMap.get(keySheetName);
	}
	
	public void dataCleanUp(){
		outputMap=null;
	}
	
	public void dataCleanUp(String keySheetName){
		
		outputMap.put(keySheetName, null);
	}
	
	public String getFilePath(com.eviware.soapui.impl.wsdl.WsdlProject project, String fileName){
		String projectPath = project.getPath().replace("/","\\");
		String relativePath = projectPath.substring(0, (projectPath.lastIndexOf("\\")+1));
		String filePath = relativePath + fileName;
		return filePath;
	}

	public OutputList getOutputList(String keySheetName){
		OutputData outputData=(OutputData) outputMap.get(keySheetName);
		if(outputData==null){
			outputData=new OutputData();
		}
		return outputData.getOutputList();
	}

	public int getRow(String keySheetName){
		OutputData outputData=(OutputData) outputMap.get(keySheetName);
		if(outputData==null){
			outputData=new OutputData();
		}
		return outputData.getRow();
	}

	public int getColumn(String keySheetName){
		OutputData outputData=(OutputData) outputMap.get(keySheetName);
		if(outputData==null){
			outputData=new OutputData();
		}
		return outputData.getColumn();
	}

/*
//-------------------------not in used--------------------------------
	List getOutputList(){
		OutputList outputList = OutputList.getInstance();
		return outputList.getOutputList();
	}

	OutputList setOutputList(Object value, int row, int column){
		OutputList outputList = OutputList.getInstance();
		outputList.setOutputList(new CustomCell(value, row, column));
		return outputList;
	}

	void setOutputList(Object value, int row, int column, boolean color){
		OutputList outputList = OutputList.getInstance();
		outputList.setOutputList(new CustomCell(value, row, column, color));
	}

	void objectCleanUp(){
		OutputList outputList = OutputList.getInstance();
		outputList.cleanUp();
	}
//---------------------------------------------------------
*/
	//---------------START writeInFile----------------
	void writeInFile(String path, String sheetName, OutputList outputList) throws IOException{
		File file = new File(path);
		WritableWorkbook copy;
		try{
			Workbook workbook = Workbook.getWorkbook(file);
			copy = Workbook.createWorkbook(file, workbook); 
		}catch(Exception e){
			copy = Workbook.createWorkbook(file);
		}
		
		WritableSheet sheet = copy.getSheet(sheetName);
		for(int i=0;sheet!=null &amp; i&lt;copy.getNumberOfSheets();i++){
			String str=copy.getSheet(i).getName();
			if(sheetName.equals(str)){
				copy.removeSheet(i);
				break;
			}
		}
		
		sheet=copy.createSheet(sheetName,-1);

		try{
			ArrayList al = (ArrayList)outputList.getOutputList();
			for(Iterator it = al.iterator(); it.hasNext();){
				CustomCell customCellObj = (CustomCell)it.next();
				if(customCellObj.getColor()){
					WritableCellFormat wcf = new WritableCellFormat();
					wcf.setBorder(Border.ALL, BorderLineStyle.THIN);
			//		wcf.setBackground(customCellObj.getColorVal());
				if(customCellObj.getColorVal() == "RED"){
					wcf.setBackground(jxl.format.Colour.RED);
				}
				if(customCellObj.getColorVal() == "GREEN"){
					wcf.setBackground(jxl.format.Colour.BRIGHT_GREEN);
				}
				else{
					wcf.setBackground(jxl.format.Colour.ORANGE);
				}
					sheet.addCell(new Label(customCellObj.getColumn(), 
					customCellObj.getRow(), String.valueOf(customCellObj.getValue()), wcf));
				} 
				else {
					

					if(customCellObj.getRow()==0){
					WritableFont cellFont = new WritableFont(WritableFont.TIMES,8);
					cellFont.setBoldStyle(WritableFont.BOLD); 
					WritableCellFormat wcf = new WritableCellFormat(cellFont);
					wcf.setWrap(true); 
					wcf.setBorder(Border.ALL, BorderLineStyle.THIN);
					sheet.addCell(new Label(customCellObj.getColumn(), 
					customCellObj.getRow(), customCellObj.getValue(), wcf));

					}
					else{
					if (customCellObj.getValue() != null &amp;&amp; customCellObj.getValue().indexOf("Test Result Summary") != -1)
					{				
					WritableFont cellFont = new WritableFont(WritableFont.TIMES,8);
					cellFont.setBoldStyle(WritableFont.BOLD); 
					WritableCellFormat wcf = new WritableCellFormat(cellFont);
					wcf.setWrap(true); 
					wcf.setBorder(Border.ALL, BorderLineStyle.THIN);
					sheet.addCell(new Label(customCellObj.getColumn(), 
					customCellObj.getRow(), customCellObj.getValue(), wcf));
					}else{								
					WritableCellFormat wcf = new WritableCellFormat();
					wcf.setBorder(Border.ALL, BorderLineStyle.THIN);
					sheet.addCell(new Label(customCellObj.getColumn(), 
					customCellObj.getRow(), customCellObj.getValue(), wcf));
					}
				}
				}
			}
		}
		catch(Exception e){}
		finally {
			copy.write(); 
			try {
				copy.close();
			} catch (WriteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			file = null;
		}
	}

	//---------------END writeInFile----------------

}

class OutputList extends Object{
	//private static OutputList outputList = null;
	List list = new ArrayList();
	OutputList(){}
	/*public static OutputList getInstance(){
		if(outputList == null)
			outputList = new OutputList();
		return outputList;
	}*/
	public List getOutputList(){ return this.list; }
	public void setOutputList(CustomCell obj){ this.list.add(obj); }
	public String toString(){ return this.list.toString(); }
	//public void cleanUp(){ outputList = null; }
}
class CustomCell extends Object {
	String value, colorVal; int row, column; boolean color = false;
	public CustomCell(Object value, int row, int column){
		this.value = (String) value;
		this.row = row;
		this.column = column;
		this.color = false;
		this.colorVal="";
	}
	public CustomCell(String value, int row, int column, boolean color){
		this.value = value;
		this.row = row;
		this.column = column;
		this.color = color;
		this.colorVal="";
	}
	public CustomCell(String value, int row, int column, boolean color, String colorVal){
		this.value = value;
		this.row = row;
		this.column = column;
		this.color = color;
		this.colorVal=colorVal;
	}
	public String getValue(){ return value; }
	public int getRow(){ return row; }
	public int getColumn(){ return column; }
	public boolean getColor(){ return color; }
	public String getColorVal(){ return colorVal; }	
	public String toString(){ return (this.value+"^^"+this.row+"^^"+this.column+"^^"+this.colorVal); }
}
class OutputData {
	OutputList outputList; int row, column;
	OutputData(){
		outputList=new OutputList();
		row=0;
		column=0;
	}
	public OutputList getOutputList(){ return this.outputList; }
	public int getRow(){ return this.row; }
	public int getColumn(){ return this.column; }
	
	public void setOutputData(Object value, int row, int column){ 
		this.row=row;
		this.column=column;

		if(outputList==null){
			outputList=new OutputList();
		}
		outputList.setOutputList(new CustomCell(value, row, column));
	}

	public void setOutputData(Object value, int row, int column, boolean color){ 
		this.row=row;
		this.column=column;

		if(outputList==null){
			outputList=new OutputList();
		}
		outputList.setOutputList(new CustomCell((String) value, row, column, color));
	}
	
	public void setOutputData(Object value, int row, int column, boolean color, String colorVal){ 
		this.row=row;
		this.column=column;

		if(outputList==null){
			outputList=new OutputList();
		}
		outputList.setOutputList(new CustomCell((String) value, row, column, color, colorVal));
	}
}
</con:afterLoadScript><con:wssContainer/><con:oAuth2ProfileContainer/><con:databaseConnectionContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>